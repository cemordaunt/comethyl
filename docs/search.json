[{"path":"https://cemordaunt.github.io/comethyl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Charles Mordaunt Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CpG Cluster Analysis","text":"vignette, use Comethyl construct weighted region comethylation network WGBS data using clusters CpGs grouped genomic location. identify modules comethylated regions, investigate correlations sample traits, analyze functional enrichments. data set includes 74 male cord blood samples newborns later diagnosed autism spectrum disorder (ASD) typical development (TD). Comethylation modules associated 49 sample characteristics including diagnosis, cell types, sample sequencing information percent CpG methylation, demographic data home ownership. goal analysis explore interactions methylome sample traits prior diagnosis ASD. Raw data available GEO (GSE140730), see previous publication details.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"CpG Cluster Analysis","text":"","code":"library(tidyverse) library(comethyl)"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"set-global-options","dir":"Articles","previous_headings":"","what":"Set Global Options","title":"CpG Cluster Analysis","text":"disableWGCNAthreads() prevents multi-threading WGCNA calculations, including functions using cor() bicor(). recommended large sets regions (> 150,000). smaller region sets, use enableWGCNAthreads() allow parallel calculations specified number threads. number threads provided, default number processors online.","code":"options(stringsAsFactors = FALSE) Sys.setenv(R_THREADS = 1) disableWGCNAThreads()"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"read-bismark-cpg-reports","dir":"Articles","previous_headings":"","what":"Read Bismark CpG Reports","title":"CpG Cluster Analysis","text":"read excel table openxlsx::read.xlsx() first column includes names sample Bismark CpG reports columns include trait values sample. trait values must numeric, though traits can categorical continuous. getCpGs() reads individual sample Bismark CpG reports single BSseq object saves .rds file. See Inputs information.","code":"colData <- openxlsx::read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"examine-cpg-totals-at-different-cutoffs","dir":"Articles","previous_headings":"","what":"Examine CpG Totals at Different Cutoffs","title":"CpG Cluster Analysis","text":"getCpGtotals() calculates total number percent CpGs remaining BSseq object filtering different cov (coverage) perSample cutoffs saves tab-separated text file. purpose function help determine cutoffs maximize number CpGs sufficient data filtering. Typically, number CpGs covered 100% samples decreases sample size increases, especially low-coverage datasets. goal filtering try balance sequencing depth per CpG number samples total number CpGs. plotCpGtotals() plots number CpGs remaining filtering different combinations cov perSample line plot saves PDF. plotCpGtotals() designed used combination getCpGtotals(). ggplot produced can edited outside function desired. Figure 1. CpG Totals","code":"CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"filter-bsobject","dir":"Articles","previous_headings":"","what":"Filter BSobject","title":"CpG Cluster Analysis","text":"filterCpGs() subsets BSseq object include CpGs meeting cov perSample cutoffs saves .rds file. filterCpGs() designed used cov perSample arguments optimized getCpGtotals() plotCpGtotals(). keep CpGs least 2 reads least 75% samples.","code":"bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"call-regions","dir":"Articles","previous_headings":"","what":"Call Regions","title":"CpG Cluster Analysis","text":"getRegions() generates set regions statistics based CpGs BSseq object. Regions can defined based CpG locations (CpG clusters), built-genomic annotations annotatr, custom genomic annotation. plotRegionStats() plots histograms region statistics, plotSDstats() plots methylation standard deviation versus region statistics. plots, can get idea characteristics regions see methylation variability affected. goal identify regions biological variability rather technical variability (due low coverage). Figure 2. Unfiltered Region Plots Figure 3. Unfiltered SD Plots","code":"regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99, file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99, file = \"Unfiltered_SD_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"examine-region-totals-at-different-cutoffs","dir":"Articles","previous_headings":"","what":"Examine Region Totals at Different Cutoffs","title":"CpG Cluster Analysis","text":"getRegionTotals() calculates region totals specified covMin methSD cutoffs. Total regions (thus total width CpGs) expected decrease minimum coverage cutoff increases SD cutoff increases. plotRegionTotals() plots region totals potential covMin methSD cutoffs. Figure 4. Region Totals","code":"regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"filter-regions","dir":"Articles","previous_headings":"","what":"Filter Regions","title":"CpG Cluster Analysis","text":"filterRegions() subsets regions include meeting covMin methSD cutoffs. filterRegions() designed used covMin methSD functions optimized getRegionTotals() plotRegionTotals(). filter regions least 10 reads samples methylation standard deviation least 5%. examine regions plotRegionStats() filtering. Figure 5. Filtered Region Plots","code":"regions <- filterRegions(regions, covMin = 10, methSD = 0.05, file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99, file = \"Filtered_Region_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"adjust-methylation-data-for-principal-components","dir":"Articles","previous_headings":"","what":"Adjust Methylation Data for Principal Components","title":"CpG Cluster Analysis","text":"getRegionMeth() calculates region methylation BSseq object saves .rds. model.matrix() creates design matrix set samples. adjustRegionMeth() adjusts region methylation top principal components saves .rds file. getDendro() clusters samples based adjusted region methylation using Euclidean distance, plotDendro() plots dendrogram. can use dendrogram see outlier samples samples clustering separately due batch effects. Figure 6. Sample Dendrogram","code":"meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\") mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod, file = \"Adjusted_Region_Methylation.rds\") getDendro(methAdj, distance = \"euclidean\") %>%  plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08))"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"select-soft-power-threshold","dir":"Articles","previous_headings":"","what":"Select Soft Power Threshold","title":"CpG Cluster Analysis","text":"getSoftPower() analyzes scale-free topology Pearson Bicor correlations determine best soft-thresholding power. refers power correlations raised much stronger correlations weighted compared weaker correlations. Pearson correlation sensitive Bicor correlation, also influenced outlier samples. use Pearson correlation order higher power detect correlated regions dataset relatively low variability samples. plotSoftPower() plots soft power threshold scale free topology fit connectivity. Typically, soft power threshold increases, fit increases connectivity decreases. soft power threshold selected lowest threshold fit 0.8 higher (use 18). Figure 7. Soft Power Plots","code":"sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"get-comethylation-modules","dir":"Articles","previous_headings":"","what":"Get Comethylation Modules","title":"CpG Cluster Analysis","text":"getModules() identifies comethylation modules using filtered regions, chosen soft power threshold, either Pearson Bicor correlation. use Pearson correlation greater sensitivity detect modules. Regions first formed blocks close exceeding maximum block size. full network analysis performed block assign regions modules; modules merged eigennodes highly correlated. modules saved .rds file. two-level clustering approach requires less computational memory significantly faster performing network analysis regions . plotRegionDendro() plots region dendrograms modules block. getModuleBED() creates bed file regions annotated identified modules; regions unassigned grey module excluded. Figure 8. Region Dendrograms","code":"modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions, corType = \"pearson\", file = \"Modules.rds\") plotRegionDendro(modules, file = \"Region_Dendrograms.pdf\") BED <- getModuleBED(modules$regions, file = \"Modules.bed\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"examine-correlations-between-modules-and-samples","dir":"Articles","previous_headings":"","what":"Examine Correlations between Modules and Samples","title":"CpG Cluster Analysis","text":"order examine relationships modules, getDendro(MEs) clusters modules based eigennode values using Bicor Pearson correlations, plotted plotDendro(). getCor(MEs) calculates correlation matrix module eigennodes using Bicor Pearson correlations, plotted plotHeatmap(). use Bicor correlations stage identify robust associations less impact outliers. Note module correlation statistics (p-values) can also calculated getMEtraitCor(). can use plots identify large groups modules low correlation well highly correlated pairs (floral white light cyan). Figure 9. Module Dendrogram Figure 10. Module Correlation Heatmap explore associations samples, getDendro(MEs, transpose = TRUE) clusters samples based module eigennode values using Bicor Pearson correlations, plotted plotDendro(). getCor(MEs, transpose = TRUE) calculates correlation matrix samples based module eigennode vales using Bicor Pearson correlations, plotted plotHeatmap(). plotHeatmap() can also used visualize module eigennode values sample . plots can useful identify sets samples correlated methylation regions. may also reveal impact batch effects identified modules. Figure 11. Sample Dendrogram Figure 12. Sample Correlation Heatmap Figure 13. Sample Heatmap","code":"MEs <- modules$MEs moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 4, nBreaks = 5, file = \"Module_ME_Dendrogram.pdf\") moduleCor <- getCor(MEs, corType = \"bicor\") plotHeatmap(moduleCor, rowDendro = moduleDendro, colDendro = moduleDendro, file = \"Module_Correlation_Heatmap.pdf\") moduleCorStats <- getMEtraitCor(MEs, colData = MEs, corType = \"bicor\", robustY = TRUE, file = \"Module_Correlation_Stats.txt\") sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5, file = \"Sample_ME_Dendrogram.pdf\") sampleCor <- getCor(MEs, transpose = TRUE, corType = \"bicor\") plotHeatmap(sampleCor, rowDendro = sampleDendro, colDendro = sampleDendro, file = \"Sample_Correlation_Heatmap.pdf\") plotHeatmap(MEs, rowDendro = sampleDendro, colDendro = moduleDendro, legend.title = \"Module\\nEigennode\", legend.position = c(0.37,0.89), file = \"Sample_ME_Heatmap.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"test-correlations-between-module-eigennodes-and-sample-traits","dir":"Articles","previous_headings":"","what":"Test Correlations between Module Eigennodes and Sample Traits","title":"CpG Cluster Analysis","text":"Next can look modules associated sample traits. getMEtraitCor() tests associations module eigennodes sample traits using Bicor Pearson correlation. getCor() calculates correlation matrix sample traits using Bicor Pearson correlations, clustered getDendro(), plotted plotDendro(). allows us identify correlated traits order traits modules heatmap similarity. plotMEtraitCor() creates heatmap sample traits versus modules. focus top associations, another heatmap created showing top 15 associations p-value. Significant associations can identified star p-value . identify significant correlations several modules sample traits including cell type proportions, study cohort, genome-wide methylation, later autism diagnosis. Figure 14. Trait Dendrogram Figure 15. Trait Correlation Heatmap Figure 16. Top Trait Correlation Heatmap","code":"MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\", file = \"ME_Trait_Correlation_Stats.txt\") traitDendro <- getCor(MEs, y = colData, corType = \"bicor\", robustY = FALSE) %>% getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08), file = \"Trait_Dendrogram.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order, traitOrder = traitDendro$order, file = \"ME_Trait_Correlation_Heatmap.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order, traitOrder = traitDendro$order, topOnly = TRUE, label.type = \"p\", label.size = 4, label.nudge_y = 0, legend.position = c(1.11, 0.795), colColorMargins = c(-1,4.75,0.5,10.1), file = \"Top_ME_Trait_Correlation_Heatmap.pdf\", width = 8.5, height = 4.25)"},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"plot-module-eigennodes-vs-traits","dir":"Articles","previous_headings":"Explore Significant Module Eigennode - Trait Correlations","what":"Plot Module Eigennodes vs Traits","title":"CpG Cluster Analysis","text":"investigate top module-trait associations, plotMEtraitDot() creates dotplot module eigennode categorical trait, plotMEtraitScatter() creates scatterplot module eigennode continuous trait. module sample trait can selected. plots can help verify module-trait association robust identify outlier samples. see bisque 4 module lower methylation ASD samples, pale turquoise module methylation correlates (opposite directions) proportion granulocytes B cells. Figure 17. Bisque4 Diagnosis Dotplot Figure 18. Pale Turquoise Granulocytes Scatterplot Figure 19. Pale Turquoise B Cells Scatterplot","code":"plotMEtraitDot(MEs$bisque4, trait = colData$Diagnosis_ASD, traitCode = c(\"TD\" = 0, \"ASD\" = 1), colors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"), ylim = c(-0.2,0.2), xlab = \"Diagnosis\", ylab = \"Bisque 4 Module Eigennode\", file = \"bisque4_ME_Diagnosis_Dotplot.pdf\") plotMEtraitScatter(MEs$paleturquoise, trait = colData$Gran, ylim = c(-0.15,0.15), xlab = \"Granulocytes\", ylab = \"Pale Turquoise Module Eigennode\", file = \"paleturquoise_ME_Granulocytes_Scatterplot.pdf\") plotMEtraitScatter(MEs$paleturquoise, trait = colData$Bcell, ylim = c(-0.15,0.15), xlab = \"B-cells\", ylab = \"Pale Turquoise Module Eigennode\", file = \"paleturquoise_ME_Bcells_Scatterplot.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"plot-region-methylation-vs-traits","dir":"Articles","previous_headings":"Explore Significant Module Eigennode - Trait Correlations","what":"Plot Region Methylation vs Traits","title":"CpG Cluster Analysis","text":"Next dig data plot raw methylation values sample trait using plotMethTrait(). values adjusted principal components, just centered mean methylation region. allows see change actual methylation across regions module relation trait. plot associations . Figure 20. Bisque4 Module Methylation Diagnosis Heatmap Figure 21. Pale Turquoise Module Methylation Granulocytes Heatmap Figure 22. Pale Turquoise Module Methylation B-Cells Heatmap","code":"regions <- modules$regions plotMethTrait(\"bisque4\", regions = regions, meth = meth, trait = colData$Diagnosis_ASD, traitCode = c(\"TD\" = 0, \"ASD\" = 1), traitColors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"), trait.legend.title = \"Diagnosis\", file = \"bisque4_Module_Methylation_Diagnosis_Heatmap.pdf\") plotMethTrait(\"paleturquoise\", regions = regions, meth = meth, trait = colData$Gran, expandY = 0.04, trait.legend.title = \"Granulocytes\", trait.legend.position = c(1.034,3.35), file = \"paleturquoise_Module_Methylation_Granulocytes_Heatmap.pdf\") plotMethTrait(\"paleturquoise\", regions = regions, meth = meth, trait = colData$Bcell, expandY = 0.04, trait.legend.title = \"B-cells\", trait.legend.position = c(1.004,3.35), file = \"paleturquoise_Module_Methylation_Bcells_Heatmap.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"annotate-modules","dir":"Articles","previous_headings":"","what":"Annotate Modules","title":"CpG Cluster Analysis","text":"annotateModule() annotates module choice nearby gene CpG island context. Genes added regions using GREAT, gene info added BioMart, gene CpG island context added annotatr. getGeneList() extracts just genes module, form gene symbol, description, Ensembl ID, NCBI Entrez ID.","code":"regionsAnno <- annotateModule(regions, module = c(\"bisque4\", \"paleturquoise\"), genome = \"hg38\", file = \"Annotated_bisque4_paleturquoise_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\") geneList_paleturquoise <- getGeneList(regionsAnno, module = \"paleturquoise\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/CpG_Cluster_Analysis.html","id":"analyze-functional-enrichment","dir":"Articles","previous_headings":"","what":"Analyze Functional Enrichment","title":"CpG Cluster Analysis","text":"Next test modules interest enrichment genes particular functions. listOntologies() gets available ontologies GREAT selected genome assembly. enrichModule() analyzes functional enrichments regions assigned selected module, relative background set regions input network (including assigned grey (unassigned) module). plotEnrichment() plots module enrichments GREAT. Using approach, see bisque 4 module associated ASD diagnosis enriched genes play role glial differentiation neurodevelopmental processes. contrast pale turquoise module associated proportion immune cell types enriched genes function response bacterial infection immune processes. Figure 23. Bisque4 Module Enrichment Plot Figure 24. Pale Turquoise Module Enrichment Plot","code":"ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\", genome = \"hg38\", file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4, file = \"bisque4_Module_Enrichment_Plot.pdf\") enrich_paleturquoise <- enrichModule(regions, module = \"paleturquoise\", genome = \"hg38\", file = \"paleturquoise_Module_Enrichment.txt\") plotEnrichment(enrich_paleturquoise, axis.text.y.size = 14, width = 10, file = \"paleturquoise_Module_Enrichment_Plot.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Gene Body Analysis","text":"vignette, use Comethyl construct weighted region comethylation network WGBS data using CpGs grouped gene body annotation. gene body methylation previously shown correlate expression, approach allows direct gene mapping functional interpretation. identify modules comethylated regions, investigate correlations sample traits, analyze functional enrichments. data set includes 74 male cord blood samples newborns later diagnosed autism spectrum disorder (ASD) typical development (TD). Comethylation modules associated 49 sample characteristics including diagnosis, cell types, sample sequencing information percent CpG methylation, demographic data home ownership. goal analysis explore interactions methylome sample traits prior diagnosis ASD. Raw data available GEO (GSE140730), see previous publication details.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Gene Body Analysis","text":"","code":"library(tidyverse) library(comethyl)"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"set-global-options","dir":"Articles","previous_headings":"","what":"Set Global Options","title":"Gene Body Analysis","text":"enableWGCNAthreads() allows parallel calculations specified number threads. number threads provided, default number processors online.","code":"options(stringsAsFactors = FALSE) Sys.setenv(R_THREADS = 1) enableWGCNAThreads(nThreads = 4)"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"read-bismark-cpg-reports","dir":"Articles","previous_headings":"","what":"Read Bismark CpG Reports","title":"Gene Body Analysis","text":"read excel table openxlsx::read.xlsx() first column includes names sample Bismark CpG reports columns include trait values sample. trait values must numeric, though traits can categorical continuous. getCpGs() reads individual sample Bismark CpG reports single BSseq object saves .rds file. See Inputs information.","code":"colData <- read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"examine-cpg-totals-at-different-cutoffs","dir":"Articles","previous_headings":"","what":"Examine CpG Totals at Different Cutoffs","title":"Gene Body Analysis","text":"getCpGtotals() calculates total number percent CpGs remaining BSseq object filtering different cov (coverage) perSample cutoffs saves tab-separated text file. purpose function help determine cutoffs maximize number CpGs sufficient data filtering. Typically, number CpGs covered 100% samples decreases sample size increases, especially low-coverage datasets. goal filtering try balance sequencing depth per CpG number samples total number CpGs. plotCpGtotals() plots number CpGs remaining filtering different combinations cov perSample line plot saves PDF. plotCpGtotals() designed used combination getCpGtotals(). ggplot produced can edited outside function desired. Figure 1. CpG Totals","code":"CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"filter-bsobject","dir":"Articles","previous_headings":"","what":"Filter BSobject","title":"Gene Body Analysis","text":"filterCpGs() subsets BSseq object include CpGs meeting cov perSample cutoffs saves .rds file. filterCpGs() designed used cov perSample arguments optimized getCpGtotals() plotCpGtotals(). keep CpGs least 2 reads least 75% samples.","code":"bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"call-regions","dir":"Articles","previous_headings":"","what":"Call Regions","title":"Gene Body Analysis","text":"getRegions() generates set regions statistics based CpGs BSseq object. Regions can defined based CpG locations, built-genomic annotations annotatr (gene bodies), custom genomic annotation. plotRegionStats() plots histograms region statistics, plotSDstats() plots methylation standard deviation versus region statistics. plots, can get idea characteristics regions see methylation variability affected. goal identify regions biological variability rather technical variability (due low coverage). Figure 2. Unfiltered Region Plots Figure 3. Unfiltered SD Plots","code":"regions <- getRegions(bs, annotation = \"genes\", genome = \"hg38\", file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99, file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99, file = \"Unfiltered_SD_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"examine-region-totals-at-different-cutoffs","dir":"Articles","previous_headings":"","what":"Examine Region Totals at Different Cutoffs","title":"Gene Body Analysis","text":"getRegionTotals() calculates region totals specified covMin methSD cutoffs. Total regions (thus total width CpGs) expected decrease minimum coverage cutoff increases SD cutoff increases. also adjust potential covMin methSD cutoffs match higher coverage lower methylation variation gene bodies. plotRegionTotals() plots region totals covMin methSD cutoffs. Figure 4. Region Totals","code":"regionTotals <- getRegionTotals(regions, covMin = seq(0,100,10), methSD = seq(0,0.02,0.002), file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"filter-regions","dir":"Articles","previous_headings":"","what":"Filter Regions","title":"Gene Body Analysis","text":"filterRegions() subsets regions include meeting covMin methSD cutoffs. filterRegions() designed used covMin methSD functions optimized getRegionTotals() plotRegionTotals(). filter regions least 10 reads samples. don’t use standard deviation filter region set small enough already use network construction. Next, examine regions plotRegionStats() filtering. Figure 5. Filtered Region Plots","code":"regions <- filterRegions(regions, covMin = 10, methSD = 0, file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99, file = \"Filtered_Region_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"adjust-methylation-data-for-principal-components","dir":"Articles","previous_headings":"","what":"Adjust Methylation Data for Principal Components","title":"Gene Body Analysis","text":"getRegionMeth() calculates region methylation BSseq object saves .rds. model.matrix() creates design matrix set samples. adjustRegionMeth() adjusts region methylation top principal components saves .rds file. getDendro() clusters samples based adjusted region methylation using Euclidean distance, plotDendro() plots dendrogram. can use dendrogram see outlier samples samples clustering separately due batch effects. Figure 6. Sample Dendrogram","code":"meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\") mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod, file = \"Adjusted_Region_Methylation.rds\") getDendro(methAdj, distance = \"euclidean\") %>%  plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08))"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"select-soft-power-threshold","dir":"Articles","previous_headings":"","what":"Select Soft Power Threshold","title":"Gene Body Analysis","text":"getSoftPower() analyzes scale-free topology Pearson Bicor correlations determine best soft-thresholding power. refers power correlations raised much stronger correlations weighted compared weaker correlations. Pearson correlation sensitive Bicor correlation, also influenced outlier samples. use Pearson correlation order higher power detect correlated regions dataset relatively low variability samples. plotSoftPower() plots soft power threshold scale free topology fit connectivity. Typically, soft power threshold increases, fit increases connectivity decreases. soft power threshold selected lowest threshold fit 0.8 higher (use 12). Figure 7. Soft Power Plots","code":"sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"get-comethylation-modules","dir":"Articles","previous_headings":"","what":"Get Comethylation Modules","title":"Gene Body Analysis","text":"getModules() identifies comethylation modules using filtered regions, chosen soft power threshold, either Pearson Bicor correlation. use Pearson correlation greater sensitivity detect modules. Regions first formed blocks close exceeding maximum block size. particular analysis, regions can fit single block. full network analysis performed assign regions modules; modules merged eigennodes highly correlated. modules saved .rds file. plotRegionDendro() plots region dendrograms modules block. getModuleBED() creates bed file regions annotated identified modules; regions unassigned grey module excluded. Figure 8. Region Dendrograms","code":"modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions, corType = \"pearson\", file = \"Modules.rds\") plotRegionDendro(modules, file = \"Region_Dendrograms.pdf\") BED <- getModuleBED(modules$regions, file = \"Modules.bed\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"examine-correlations-between-modules-and-samples","dir":"Articles","previous_headings":"","what":"Examine Correlations between Modules and Samples","title":"Gene Body Analysis","text":"order examine relationships modules, getDendro(MEs) clusters modules based eigennode values using Bicor Pearson correlations, plotted plotDendro(). getCor(MEs) calculates correlation matrix module eigennodes using Bicor Pearson correlations, plotted plotHeatmap(). use Bicor correlations stage identify robust associations less impact outliers. Note module correlation statistics (p-values) can also calculated getMEtraitCor(). can use plots identify groups correlated modules. Figure 9. Module Dendrogram Figure 10. Module Correlation Heatmap explore associations samples, getDendro(MEs, transpose = TRUE) clusters samples based module eigennode values using Bicor Pearson correlations, plotted plotDendro(). getCor(MEs, transpose = TRUE) calculates correlation matrix samples based module eigennode vales using Bicor Pearson correlations, plotted plotHeatmap(). plotHeatmap() can also used visualize module eigennode values sample . plots can useful identify sets samples correlated methylation regions. may also reveal impact batch effects identified modules. Figure 11. Sample Dendrogram Figure 12. Sample Correlation Heatmap Figure 13. Sample Heatmap","code":"MEs <- modules$MEs moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 5, nBreaks = 5, file = \"Module_ME_Dendrogram.pdf\") moduleCor <- getCor(MEs, corType = \"bicor\") plotHeatmap(moduleCor, rowDendro = moduleDendro, colDendro = moduleDendro, file = \"Module_Correlation_Heatmap.pdf\") moduleCorStats <- getMEtraitCor(MEs, colData = MEs, corType = \"bicor\", robustY = TRUE, file = \"Module_Correlation_Stats.txt\") sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5, file = \"Sample_ME_Dendrogram.pdf\") sampleCor <- getCor(MEs, transpose = TRUE, corType = \"bicor\") plotHeatmap(sampleCor, rowDendro = sampleDendro, colDendro = sampleDendro, file = \"Sample_Correlation_Heatmap.pdf\") plotHeatmap(MEs, rowDendro = sampleDendro, colDendro = moduleDendro, legend.title = \"Module\\nEigennode\", legend.position = c(0.37,0.89), file = \"Sample_ME_Heatmap.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"test-correlations-between-module-eigennodes-and-sample-traits","dir":"Articles","previous_headings":"","what":"Test Correlations between Module Eigennodes and Sample Traits","title":"Gene Body Analysis","text":"Next can look modules associated sample traits. getMEtraitCor() tests associations module eigennodes sample traits using Bicor Pearson correlation. getCor() calculates correlation matrix sample traits using Bicor Pearson correlations, clustered getDendro(), plotted plotDendro(). allows us identify correlated traits order traits modules heatmap similarity. plotMEtraitCor() creates heatmap sample traits versus modules. focus top associations, another heatmap created showing top 15 associations p-value. Significant associations can identified star p-value . identify significant correlations several modules sample traits including cell type proportions, genome-wide methylation, even home ownership. Figure 14. Trait Dendrogram Figure 15. Trait Correlation Heatmap Figure 16. Top Trait Correlation Heatmap","code":"MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\", file = \"ME_Trait_Correlation_Stats.txt\") traitDendro <- getCor(MEs, y = colData, corType = \"bicor\", robustY = FALSE) %>% getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08), file = \"Trait_Dendrogram.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order, traitOrder = traitDendro$order, file = \"ME_Trait_Correlation_Heatmap.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order, traitOrder = traitDendro$order, topOnly = TRUE, label.type = \"p\", label.size = 4, label.nudge_y = 0, legend.position = c(1.14, 0.745), colColorMargins = c(-1,5.1,0.5,10.47), file = \"Top_ME_Trait_Correlation_Heatmap.pdf\", width = 7, height = 3.5)"},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"plot-module-eigennodes-vs-traits","dir":"Articles","previous_headings":"Explore Significant Module Eigennode - Trait Correlations","what":"Plot Module Eigennodes vs Traits","title":"Gene Body Analysis","text":"investigate top module-trait associations, plotMEtraitDot() creates dotplot module eigennode categorical trait, plotMEtraitScatter() creates scatterplot module eigennode continuous trait. module sample trait can selected. plots can help verify module-trait association robust identify outlier samples. see green yellow module lower methylation increasing amounts granulocytes, higher methylation home ownership. Figure 17. Green Yellow Granulocytes Dotplot Figure 18. Green Yellow Home Ownership Dotplot","code":"plotMEtraitScatter(MEs$greenyellow, trait = colData$Gran, ylim = c(-0.25,0.25), xlab = \"Granulocytes\", ylab = \"Green Yellow Module Eigennode\", file = \"greenyellow_ME_Granulocytes_Scatterplot.pdf\") plotMEtraitDot(MEs$greenyellow, trait = colData$home_ownership, binwidth = 0.015, traitCode = c(\"No\" = 0, \"Yes\" = 1), colors = c(\"No\" = \"#3366CC\", \"Yes\" = \"#FF3366\"), ylim = c(-0.25,0.25), xlab = \"Home Ownership\", nBreaks = 5, ylab = \"Green Yellow Module Eigennode\", file = \"greenyellow_ME_Home_Ownership_Dotplot.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"plot-region-methylation-vs-traits","dir":"Articles","previous_headings":"Explore Significant Module Eigennode - Trait Correlations","what":"Plot Region Methylation vs Traits","title":"Gene Body Analysis","text":"Next dig data plot raw methylation values sample trait using plotMethTrait(). values adjusted principal components, just centered mean methylation region. allows see change actual methylation across regions module relation trait. plot associations . Figure 19. Green Yellow Module Methylation Granulocytes Heatmap Figure 20. Green Yellow Module Methylation Home Ownership Heatmap","code":"regions <- modules$regions plotMethTrait(\"greenyellow\", regions = regions, meth = meth, trait = colData$Gran, expandY = 0.04, trait.legend.title = \"Granulocytes\", trait.legend.position = c(1.034,3.35), traitMargins = c(0,6,1,4.6), file = \"greenyellow_Module_Methylation_Granulocytes_Heatmap.pdf\") plotMethTrait(\"greenyellow\", regions = regions, meth = meth, trait = colData$home_ownership, expandY = 0.04, traitCode = c(\"No\" = 0, \"Yes\" = 1), traitColors = c(\"No\" = \"#3366CC\", \"Yes\" = \"#FF3366\"), trait.legend.title = \"Home Ownership\", trait.legend.position = c(1.05,4.39), traitMargins = c(0,6,1,4.6), file = \"greenyellow_Module_Methylation_Home_Ownership_Heatmap.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"annotate-modules","dir":"Articles","previous_headings":"","what":"Annotate Modules","title":"Gene Body Analysis","text":"annotateModule() annotates module choice nearby gene CpG island context. Genes added regions using GREAT, gene info added BioMart, gene CpG island context added annotatr. getGeneList() extracts just genes module, form gene symbol, description, Ensembl ID, NCBI Entrez ID.","code":"regionsAnno <- annotateModule(regions, module = c(\"greenyellow\"), genome = \"hg38\", file = \"Annotated_greenyellow_Module_Regions.txt\") geneList_greenyellow <- getGeneList(regionsAnno, module = \"greenyellow\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Gene_Body_Analysis.html","id":"analyze-functional-enrichment","dir":"Articles","previous_headings":"","what":"Analyze Functional Enrichment","title":"Gene Body Analysis","text":"Next test module interest enrichment genes particular functions. listOntologies() gets available ontologies GREAT selected genome assembly. enrichModule() analyzes functional enrichments regions assigned selected module, relative background set regions input network (including assigned grey (unassigned) module). plotEnrichment() plots module enrichments GREAT. Using approach, see green yellow module enriched genes play role glutamate receptor activity respiration. Figure 21. Green Yellow Module Enrichment Plot","code":"ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrichment <- enrichModule(regions, module = \"greenyellow\", genome = \"hg38\", file = \"greenyellow_Module_Enrichment.txt\") plotEnrichment(enrichment, file = \"greenyellow_Module_Enrichment_Plot.pdf\")"},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"comethyl","dir":"Articles","previous_headings":"","what":"Comethyl","title":"Introduction to Comethyl","text":"Comethyl systems biology method multivariate analysis whole genome bisulfite sequencing (WGBS) data. Comethyl can used construct weighted region comethylation network user-defined regions, identify comethylation modules genomic regions make modules, analyze functional enrichments, investigate correlations comethylation modules sample traits interest.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Introduction to Comethyl","text":"Bismark Cytosine Reports: Following WGBS samples, raw fastq files processed CpG count matrices biases removed. One available pipeline CpG_Me, performs read alignment quality control WGBS raw fastq files, generates Bismark Cytosine Reports used Comethyl. Sample Trait Table (\"sample_info.xlsx\"): data frame samples (specifying CpG reports) rows sample traits interest columns. values table must numeric, though data can either categorical continuous given trait. Sample traits can include available information potential variables interest well potential confounding variables. WGBS datasets, potential confounding variables include cell type proportions well technical variables including coverage, read duplication, read trimming, global cytosine methylation levels. human populations, metadata include clinical, diagnostic, demographic data, well sample collection characteristics, gestational age birthweight cord blood. experimental studies animal models cell cultures, experimental variables included metadata exploring module-trait relationships. comethylation modules identified Bismark Cytosine Reports correlated traits table.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"annotation","dir":"Articles","previous_headings":"","what":"Annotation","title":"Introduction to Comethyl","text":"One unique feature Comethyl ability define regions based functional annotations, CpG islands, gene bodies, enhancers, custom annotation. allows user focus specific portion genome integrate genomic data sets. Since gene body methylation can correlate positively expression, gene bodies selected alternative regions explore cord blood data set, addition approach calling genomic regions CpG location.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use Case","title":"Introduction to Comethyl","text":"example detailed vignettes dataset 74 male cord blood samples newborns later diagnosed autism spectrum disorder (ASD) typical development (TD). Comethylation modules associated 49 sample characteristics including diagnosis, cell types, sample sequencing information percent CpG methylation, demographic data home ownership. Raw data available GEO (GSE140730), see previous publication details.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to Comethyl","text":"can install Comethyl repository load R session code .","code":"install.packages(c(\"BiocManager\", \"remotes\")) BiocManager::install(\"cemordaunt/comethyl\") library(comethyl)"},{"path":"https://cemordaunt.github.io/comethyl/articles/Introduction.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Introduction to Comethyl","text":"Function reference CpG cluster analysis vignette Gene body analysis vignette","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"comethyl","dir":"Articles","previous_headings":"","what":"Comethyl","title":"Introduction to Comethyl","text":"Comethyl systems biology method multivariate analysis whole genome bisulfite sequencing (WGBS) data. Comethyl can used construct weighted region comethylation network user-defined regions, identify comethylation modules genomic regions make modules, analyze functional enrichments, investigate correlations comethylation modules sample traits interest.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Introduction to Comethyl","text":"Bismark Cytosine Reports: Following WGBS samples, raw fastq files processed CpG count matrices biases removed. One available pipeline CpG_Me, performs read alignment quality control WGBS raw fastq files, generates Bismark Cytosine Reports used Comethyl. Sample Trait Table (\"sample_info.xlsx\"): excel table read data.frame samples (specifying CpG reports) rows sample traits interest columns. values table must numeric, though data can either categorical continuous given trait. Sample traits can include available information potential variables interest well potential confounding variables. WGBS datasets, potential confounding variables include cell type proportions well technical variables including coverage, read duplication, read trimming, global cytosine methylation levels. human populations, metadata include clinical, diagnostic, demographic data, well sample collection characteristics, gestational age birthweight cord blood. experimental studies animal models cell cultures, experimental variables included metadata exploring module-trait relationships. comethylation modules identified Bismark Cytosine Reports correlated traits table.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"annotation","dir":"Articles","previous_headings":"","what":"Annotation","title":"Introduction to Comethyl","text":"One unique feature Comethyl ability define regions based functional annotations, CpG islands, gene bodies, enhancers, custom annotation. allows user focus specific portion genome integrate genomic data sets. Since gene body methylation can correlate positively expression, gene bodies selected alternative regions explore cord blood data set, addition approach calling genomic regions CpG location.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use Case","title":"Introduction to Comethyl","text":"example detailed vignettes dataset 74 male cord blood samples newborns later diagnosed autism spectrum disorder (ASD) typical development (TD). Comethylation modules associated 49 sample characteristics including diagnosis, cell types, sample sequencing information percent CpG methylation, demographic data home ownership. Raw data available GEO (GSE140730), see previous publication details.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to Comethyl","text":"can install Comethyl repository load R session code .","code":"install.packages(c(\"BiocManager\", \"remotes\")) BiocManager::install(\"cemordaunt/comethyl\") library(comethyl)"},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"memory-usage","dir":"Articles","previous_headings":"","what":"Memory Usage","title":"Introduction to Comethyl","text":"Comethyl performs large number correlation calculations constructing network, can take large amount memory extended period time. Memory usage time taken account running getSoftPower() getModules(). getSoftPower() uses exponentially increasing amount RAM number regions increase, care taken filter number regions informative regions considered. reference, 250,000 regions typically able run large node 500GB RAM. Smaller region sets typically require much less memory run. ’s also recommended use multiple threads large region sets. default system BLAS libraries, getModules() can take multiple days run, can sped considerably R configured fast BLAS library OpenBLAS. testing, getModules() took 85 hours run set 250,000 regions default BLAS, 6 hours OpenBLAS. getSoftPower() also sped 3 hours 2 hours OpenBLAS. information configuring R OpenBLAS similar libraries can found R Installation Manual.","code":""},{"path":"https://cemordaunt.github.io/comethyl/articles/comethyl.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Introduction to Comethyl","text":"Function reference CpG cluster analysis vignette Gene body analysis vignette","code":""},{"path":"https://cemordaunt.github.io/comethyl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Mordaunt. Author, maintainer. Julia Mouat. Contributor.","code":""},{"path":"https://cemordaunt.github.io/comethyl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mordaunt C (2022). comethyl: R Package Weighted Region Comethylation Network Analysis. R package version 1.1.0, https://github.com/cemordaunt/comethyl.","code":"@Manual{,   title = {comethyl: An R Package for Weighted Region Comethylation Network Analysis},   author = {Charles Mordaunt},   year = {2022},   note = {R package version 1.1.0},   url = {https://github.com/cemordaunt/comethyl}, }"},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"comethyl","dir":"","previous_headings":"","what":"An R Package for Weighted Region Comethylation Network Analysis","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"R package weighted region comethylation network analysis. Comethyl builds upon WGCNA package identify interpret modules comethylated regions whole-genome bisulfite sequencing data. Regions defined clusters CpG sites genomic annotations, percent methylation values used identify comethylation modules. Interesting modules identified explored comparing sample traits examining functional enrichments. Results visualized high-quality, editable plots ggplot2.","code":""},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"can install Comethyl repository load R session code .","code":"install.packages(c(\"BiocManager\", \"remotes\")) BiocManager::install(\"cemordaunt/comethyl\") library(comethyl)"},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"Complete documentation comethyl available https://cemordaunt.github.io/comethyl/. Introduction Comethyl Function reference CpG cluster analysis vignette Gene body analysis vignette","code":""},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"Comethyl Workflow","code":""},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"citing-comethyl","dir":"","previous_headings":"","what":"Citing Comethyl","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"use Comethyl work, please cite Briefings Bioinformatics publication: Mordaunt CE, Mouat JS, Schmidt RJ, LaSalle JM. (2022) Comethyl: network-based methylome approach investigate multivariate nature health disease. Briefings Bioinformatics bbab554.","code":""},{"path":"https://cemordaunt.github.io/comethyl/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"An R Package for Weighted Region Comethylation Network Analysis","text":"Many thanks Julia Mouat creating vignettes, Ben Laufer Janine LaSalle helpful discussions.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Methylation Data for Principal Components — adjustRegionMeth","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"adjustRegionMeth() adjusts region methylation data top principal components, transposes , saves .rds file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"","code":"adjustRegionMeth(   meth,   mod = matrix(1, nrow = ncol(meth), ncol = 1),   save = TRUE,   file = \"Adjusted_Region_Methylation.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"meth numeric matrix, row region column sample. typically obtained getRegionMeth(). mod matrix giving model matrix used fit data. See example. save logical(1) indicating whether save matrix. file character(1) giving file name (.rds) saved matrix. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"numeric matrix, row sample column region.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"adjustRegionMeth() uses sva::sva_network() regress top principal components. information function approach given documentation publications related sva package.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/adjustRegionMeth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Methylation Data for Principal Components — adjustRegionMeth","text":"","code":"if (FALSE) {  # Get Methylation Data meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\")  # Adjust Methylation Data for PCs mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod,                             file = \"Adjusted_Region_Methylation.rds\")  # Assess Sample Similarity getDendro(methAdj, distance = \"euclidean\") %>%         plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08))  # Select Soft Power Threshold sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Module Regions — annotateModule","title":"Annotate Module Regions — annotateModule","text":"annotateModule() takes data.frame regions module assignments, annotates genes using GREAT, adds additional gene information Ensembl BioMart, provides gene regulatory context annotatr, saves .txt file. Support provided several genomes, including hg38, hg19, hg18, mm10, mm9, danRer7.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Module Regions — annotateModule","text":"","code":"annotateModule(   regions,   module = NULL,   grey = FALSE,   genome = c(\"hg38\", \"hg19\", \"hg18\", \"mm10\", \"mm9\", \"danRer7\"),   includeCuratedRegDoms = FALSE,   rule = c(\"basalPlusExt\", \"twoClosest\", \"oneClosest\"),   adv_upstream = 5,   adv_downstream = 1,   adv_span = 1000,   adv_twoDistance = 1000,   adv_oneDistance = 1000,   version = c(\"4.0.4\", \"3.0.0\", \"2.0.2\"),   save = TRUE,   file = \"Annotated_Module_Regions.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Module Regions — annotateModule","text":"regions data.frame regions module assignments, typically obtained getModules(). module character giving name one modules annotate. null, modules annotated. grey logical(1) specifying whether include grey (unassigned) module. genome character(1) giving genome build regions. Supported genomes include hg38, hg19, hg18, mm10, mm9, danRer7. See Details. includeCuratedRegDoms logical(1) indicating whether include curated regulatory domains GREAT gene annotation. rule character(1) specifying rule used GREAT gene annotation. Possible values include basalPlusExt, twoClosest, oneClosest. See rGREAT::submitGreatJob() details next six arguments. adv_upstream numeric(1) giving distance upstream TSS (kb) define basal regulatory domain basalPlusExt rule. adv_downstream numeric(1) giving distance downstream TSS (kb) define basal regulatory domain basalPlusExt rule. adv_span numeric(1) specifying distance upstream downstream TSS (kb) define maximum extension regulatory domain basalPlusExt rule. adv_twoDistance numeric(1) giving distance upstream downstream TSS (kb) define maximum extension regulatory domain twoClosest rule. adv_oneDistance numeric(1) giving distance upstream downstream TSS (kb) define maximum extension regulatory domain oneClosest rule. version character(1) specifying version GREAT use gene annotation. Possible values include 4.0.4, 3.0.0, 2.0.2. Different versions GREAT support different genomes. See Details. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Module Regions — annotateModule","text":"data.frame adding gene regulatory annotations regions.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate Module Regions — annotateModule","text":"regions can filtered one modules interest, grey (unassigned) module can excluded. Gene annotation performed rGREAT package, allows different annotation rules versions GREAT. default basalPlusExt annotation rule associates gene region region within basal regulatory domain gene (5 kb upstream 1 kb downstream TSS) within 1 Mb upstream downstream TSS basal regulatory domain another gene. rules include twoClosest oneClosest, effectively assign two nearest genes one nearest genes, respectively. See rGREAT::submitGreatJob() details. GREAT supports different genomes depending version: GREAT v4.0.4 hg38, hg19, mm10, mm9 GREAT v3.0.0 hg19, mm10, mm9, danRer7 GREAT v2.0.2 hg19, hg18, mm9, danRer7 Gene information provided biomaRt package, adds gene description along Ensembl NCBI Entrez gene IDs. Regulatory context added annotatr package. provides positional context region relative nearby genes, enhancers, CpG islands. Note annotatr support hg18 danRer7 genomes.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/annotateModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate Module Regions — annotateModule","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Annotate Modules regionsAnno <- annotateModule(regions, module = \"bisque4\",                               genome = \"hg38\",                               file = \"Annotated_bisque4_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\")  # Analyze Functional Enrichment ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\",                                genome = \"hg38\",                                file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4,                file = \"bisque4_Module_Enrichment_Plot.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/comethyl.html","id":null,"dir":"Reference","previous_headings":"","what":"comethyl: An R package for weighted region comethylation network analysis — comethyl","title":"comethyl: An R package for weighted region comethylation network analysis — comethyl","text":"Comethyl builds upon WGCNA package identify interpret modules comethylated regions whole-genome bisulfite sequencing data. Regions defined clusters CpG sites genomic annotations, percent methylation values used identify comethylation modules. Interesting modules identified explored comparing sample traits examining functional enrichments. Results visualized high-quality, editable plots ggplot2.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/comethyl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"comethyl: An R package for weighted region comethylation network analysis — comethyl","text":"Charles Mordaunt","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Module Functional Enrichment with GREAT — enrichModule","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"enrichModule() takes data.frame regions module assignments, filters module(s) interest, submits GREAT functional enrichment analysis compared gene sets specified ontologies. results processed saved .txt file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"","code":"enrichModule(   regions,   module = NULL,   genome = c(\"hg38\", \"hg19\", \"hg18\", \"mm10\", \"mm9\", \"danRer7\"),   includeCuratedRegDoms = FALSE,   rule = c(\"basalPlusExt\", \"twoClosest\", \"oneClosest\"),   adv_upstream = 5,   adv_downstream = 1,   adv_span = 1000,   adv_twoDistance = 1000,   adv_oneDistance = 1000,   version = c(\"4.0.4\", \"3.0.0\", \"2.0.2\"),   ontologies = c(\"GO Molecular Function\", \"GO Biological Process\",     \"GO Cellular Component\", \"Mouse Phenotype\", \"Human Phenotype\"),   min_background_region_hits = 5,   adjMethod = c(\"fdr\", \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"BY\", \"none\"),   min_region_hits = 2,   pvalue_threshold = 0.01,   save = TRUE,   file = \"Module_Enrichment_Results.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"regions data.frame regions module assignments, typically obtained getModules(). module character giving name one modules analyze functional enrichment. null, modules analyzed, except grey (unassigned) module. genome character(1) giving genome build regions. Supported genomes include hg38, hg19, hg18, mm10, mm9, danRer7. See Details. includeCuratedRegDoms logical(1) indicating whether include curated regulatory domains GREAT gene annotation. rule character(1) specifying rule used GREAT gene annotation. Possible values include basalPlusExt, twoClosest, oneClosest. See rGREAT::submitGreatJob() details next six arguments. adv_upstream numeric(1) giving distance upstream TSS (kb) define basal regulatory domain basalPlusExt rule. adv_downstream numeric(1) giving distance downstream TSS (kb) define basal regulatory domain basalPlusExt rule. adv_span numeric(1) specifying distance upstream downstream TSS (kb) define maximum extension regulatory domain basalPlusExt rule. adv_twoDistance numeric(1) giving distance upstream downstream TSS (kb) define maximum extension regulatory domain twoClosest rule. adv_oneDistance numeric(1) giving distance upstream downstream TSS (kb) define maximum extension regulatory domain oneClosest rule. version character(1) specifying version GREAT use gene annotation. Possible values include 4.0.4, 3.0.0, 2.0.2. Different versions GREAT support different genomes. See Details. ontologies character giving ontology databases query. Default ontologies include GO Molecular Function, GO Biological Process, GO Cellular Component, Mouse Phenotype, Human Phenotype. possible ontologies can obtained listOntologies(). min_background_region_hits numeric(1) giving minimum number overlaps gene set regulatory domains background regions include gene set results. affects results used adjusting p-values multiple comparisons. adjMethod character(1) specifying method adjusting p-values, Potential values include fdr, holm, hochberg, hommel, bonferroni, BH, , none. min_region_hits numeric(1) giving minimum number overlaps gene set regulatory domains module regions include gene set results. pvalue_threshold numeric(1) giving maximum p-value enrichment include gene set results. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"data.frame functional enrichment results.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"Submission GREAT performed rGREAT package, allows different annotation rules versions GREAT. default basalPlusExt annotation rule associates gene region region within basal regulatory domain gene (5 kb upstream 1 kb downstream TSS) within 1 Mb upstream downstream TSS basal regulatory domain another gene. rules include twoClosest oneClosest, effectively assign two nearest genes one nearest genes, respectively. See rGREAT::submitGreatJob() details. GREAT supports different genomes depending version: GREAT v4.0.4 hg38, hg19, mm10, mm9 GREAT v3.0.0 hg19, mm10, mm9, danRer7 GREAT v2.0.2 hg19, hg18, mm9, danRer7 Functional enrichment analysis performed regions module(s) interest relative background set regions regions, including grey (unassigned) module. regions compared overlap regulatory domains genes annotated functional gene sets ontologies interest. default ontologies include GO Molecular Function, GO Biological Process, GO Cellular Component, Mouse Phenotype, Human Phenotype. Initial enrichment results filtered terms minimum number overlaps background set regions, p-values adjusted multiple comparisons using specified method, results filtered minimum number overlaps module(s) interest p-value threshold. Finally, gene symbols obtained significant gene sets, result saved .txt file.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/enrichModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze Module Functional Enrichment with GREAT — enrichModule","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Annotate Modules regionsAnno <- annotateModule(regions, module = \"bisque4\",                               genome = \"hg38\",                               file = \"Annotated_bisque4_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\")  # Analyze Functional Enrichment ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\",                                genome = \"hg38\",                                file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4,                file = \"bisque4_Module_Enrichment_Plot.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter BSseq Objects by Coverage — filterCpGs","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"filterCpGs() subsets BSseq object include CpGs meeting cov perSample cutoffs saves .rds file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"","code":"filterCpGs(   bs,   cov = 2,   perSample = 0.75,   save = TRUE,   file = \"Filtered_BSseq.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"bs BSseq object. cov numeric(1) specifying minimum number reads overlapping CpG included total. perSample numeric(1) specifying minimum percent samples cov reads CpG included total. save logical(1) indicating whether save BSseq object. file character(1) giving file name (.rds) saved BSseq object. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"BSseq object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"filterCpGs() designed used cov perSample arguments optimized getCpGtotals() plotCpGtotals().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/filterCpGs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter BSseq Objects by Coverage — filterCpGs","text":"","code":"if (FALSE) {  # Read Bismark CpG Reports colData <- read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")  # Examine CpG Totals at Different Cutoffs CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")  # Filter BSseq Object bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Regions — filterRegions","title":"Filter Regions — filterRegions","text":"filterRegions() filters region set using specified covMin methSD thresholds saves tab-delimited text file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Regions — filterRegions","text":"","code":"filterRegions(   regions,   covMin = 10,   methSD = 0.05,   save = TRUE,   file = \"Filtered_Regions.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Regions — filterRegions","text":"regions data.frame output getRegions() giving set regions statistics region. covMin numeric(1) specifying minimum number reads CpGs region sample methSD numeric(1) specifying minimum methylation standard deviation region save logical(1) indicating whether save data.frame file character(1) giving file name (.txt) saved data.frame verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Regions — filterRegions","text":"filtered version regionsdata.frame","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Regions — filterRegions","text":"purpose function use cutoffs minimum coverage methylation standard deviation guided functions obtain robust set variably methylated regions. Computational resources also consideration network construction, region sets 250K less generally performing well.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/filterRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Regions — filterRegions","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Correlations — getCor","title":"Calculate Correlations — getCor","text":"getCor() calculates correlation coefficients using either pearson bicor methods. Calculations can done columns single matrix two vectors matrices.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Correlations — getCor","text":"","code":"getCor(   x,   y = NULL,   transpose = FALSE,   corType = c(\"bicor\", \"pearson\"),   maxPOutliers = 0.1,   robustY = TRUE,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Correlations — getCor","text":"x numeric vector matrix. x must matrix y null. y numeric vector matrix. null, correlations calculated columns x. transpose logical(1) specifying whether transpose matrix. corType character(1) indicating correlation statistic use calculation. Potential values include pearson bicor. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. robustY logical(1) indicating whether use robust calculation y bicor statistic. FALSE recommended y binary variable. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Correlations — getCor","text":"numeric matrix.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Correlations — getCor","text":"first input argument can optionally transposed. correlation calculations performed WGCNA::cor() WGCNA::bicor().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Correlations — getCor","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Examine Correlations between Modules MEs <- modules$MEs moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 4, nBreaks = 5,            file = \"Module_ME_Dendrogram.pdf\") moduleCor <- getCor(MEs, corType = \"bicor\") plotHeatmap(moduleCor, rowDendro = moduleDendro, colDendro = moduleDendro,             file = \"Module_Correlation_Heatmap.pdf\") moduleCorStats <- getMEtraitCor(MEs, colData = MEs, corType = \"bicor\",                                 robustY = TRUE,                                 file = \"Module_Correlation_Stats.txt\")  # Examine Correlations between Samples sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5,            file = \"Sample_ME_Dendrogram.pdf\") sampleCor <- getCor(MEs, transpose = TRUE, corType = \"bicor\") plotHeatmap(sampleCor, rowDendro = sampleDendro, colDendro = sampleDendro,             file = \"Sample_Correlation_Heatmap.pdf\")  # Visualize Module Eigennode Values plotHeatmap(MEs, rowDendro = sampleDendro, colDendro = moduleDendro,             legend.title = \"Module\\nEigennode\",             legend.position = c(0.37,0.89),             file = \"Sample_ME_Heatmap.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Bismark CpG reports — getCpGs","title":"Read Bismark CpG reports — getCpGs","text":"getCpGs() reads individual sample Bismark CpG reports single BSseq object saves .rds file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Bismark CpG reports — getCpGs","text":"","code":"getCpGs(   colData,   path = getwd(),   pattern = \"*CpG_report.txt.gz\",   sameLoci = TRUE,   chroms = c(paste(\"chr\", 1:22, sep = \"\"), \"chrX\", \"chrY\", \"chrM\"),   BPPARAM = BiocParallel::MulticoreParam(10),   save = TRUE,   file = \"Unfiltered_BSseq.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Bismark CpG reports — getCpGs","text":"colData data.frame whose row names specify CpG reports load BSseq object whose columns sample traits numeric values. path character giving path(s) CpG reports. pattern regular expression used filter CpG reports. sameLoci logical(1) indicating whether CpG reports contain set methylation loci. case files genome wide cytosine reports aligned reference genome. default sameLoci = TRUE speeds getCpGs() parse CpG report . chroms character giving chromosomes include BSseq object. BPPARAM BiocParallel::BiocParallelParam instance providing parallel back-end use evaluation. save logical(1) indicating whether save BSseq object. file character(1) giving file name (.rds) saved BSseq object. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Bismark CpG reports — getCpGs","text":"BSseq object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Bismark CpG reports — getCpGs","text":"BSseq object still needs filtered coverage individual CpGs. information arguments given documentation bsseq::read.bismark().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Bismark CpG reports — getCpGs","text":"","code":"if (FALSE) {  # Read Bismark CpG Reports colData <- read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")  # Examine CpG Totals at Different Cutoffs CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")  # Filter BSseq Object bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"getCpGtotals() calculates total number percent CpGs remaining BSseq object filtering different cov perSample cutoffs saves tab-delimited text file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"","code":"getCpGtotals(   bs,   cov = seq(0, 10, 1),   perSample = seq(0.5, 1, 0.05),   save = TRUE,   file = \"CpG_Totals.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"bs BSseq object. cov numeric specifying minimum number reads overlapping CpG included total. perSample numeric specifying minimum percent samples cov reads CpG included total. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"data.frame giving number CpGs (millions) percent total CpGs combinations cov perSample. number samples corresponding perSample also given.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"purpose function help determine cutoffs maximize number CpGs sufficient data filtering. recommended input multiple cov perSample cutoffs comparison. Typically, number CpGs covered 100% samples decreases sample size increases, especially low-coverage datasets.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getCpGtotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Total CpGs at Different Coverage Cutoffs — getCpGtotals","text":"","code":"if (FALSE) {  # Read Bismark CpG Reports colData <- read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")  # Examine CpG Totals at Different Cutoffs CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")  # Filter BSseq Object bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Hierarchical Clustering — getDendro","title":"Perform Hierarchical Clustering — getDendro","text":"getDendro() computes distance rows matrix performs hierarchical clustering. Possible distance measures include euclidean, pearson, bicor. function also optionally transposes matrix.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Hierarchical Clustering — getDendro","text":"","code":"getDendro(   x,   transpose = FALSE,   distance = c(\"euclidean\", \"pearson\", \"bicor\"),   maxPOutliers = 0.1,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Hierarchical Clustering — getDendro","text":"x numeric matrix. transpose logical(1) specifying whether transpose matrix. distance character(1) indicating distance measure use. Possible values include euclidean, pearson, bicor. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Hierarchical Clustering — getDendro","text":"stats::hclust object describes clustering tree.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Hierarchical Clustering — getDendro","text":"Euclidean distance calculated stats::dist(), method = \"euclidean\", Pearson correlation biweight midcorrelation (bicor) computed WGCNA::cor() WGCNA::bicor(), respectively. cor bicor subtracted 1 calculate dissimilarity. Hierarchical clustering done stats::hclust(), method = \"average\".","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getDendro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Hierarchical Clustering — getDendro","text":"","code":"if (FALSE) {  # Assess Sample Similarity getDendro(methAdj, distance = \"euclidean\") %>%         plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08))  # Examine Correlations between Modules moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 4, nBreaks = 5,            file = \"Module_ME_Dendrogram.pdf\")  # Characterize Correlations between Samples sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5,            file = \"Sample_ME_Dendrogram.pdf\")  # Examine Correlations between Traits traitDendro <- getCor(MEs, y = colData, corType = \"bicor\",                       robustY = FALSE) %>%         getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08),            file = \"Trait_Dendrogram.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a Gene List from Annotated Regions — getGeneList","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"getGeneList() takes data.frame regions annotated gene information extracts vector unique gene symbols, descriptions, IDs.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"","code":"getGeneList(   regions_annotated,   module = NULL,   type = c(\"symbol\", \"description\", \"ensemblID\", \"entrezID\"),   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"regions_annotated data.frame regions gene annotations, typically produced annotateModule(). module character giving name one modules include. null, modules included. type character(1) specifying type gene information extract. Possible values include symbol, description, ensemblID entrezID. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"vector unique values.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"getGeneList() designed used combination annotateModule(). regions can filtered one modules interest. Values can extracted include gene symbol, description, ensemblID entrezID.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getGeneList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a Gene List from Annotated Regions — getGeneList","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Annotate Modules regionsAnno <- annotateModule(regions, module = \"bisque4\",                               genome = \"hg38\",                               file = \"Annotated_bisque4_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\")  # Analyze Functional Enrichment ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\",                                genome = \"hg38\",                                file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4,                file = \"bisque4_Module_Enrichment_Plot.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"getMEtraitCor() calculates correlation coefficients p-values eigennode values modules sample traits saves .txt file. Correlations performed using either pearson bicor methods.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"","code":"getMEtraitCor(   MEs,   colData,   corType = c(\"bicor\", \"pearson\"),   maxPOutliers = 0.1,   robustY = FALSE,   save = TRUE,   file = \"ME_Trait_Correlation_Stats.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"MEs data.frame module eigennode values, rows samples columns modules. row names MEs must include set values row names colData. colData data.frame whose row names specify samples whose columns sample traits numeric values. corType character(1) indicating correlation statistic use calculation. Potential values include pearson bicor. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. robustY logical(1) indicating whether use robust calculation y bicor statistic. FALSE recommended y binary variable. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"data.frame giving correlation statistics module-trait pair.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"getMEtraitCor() designed used combination getModules(). correlation calculations performed WGCNA::corAndPvalue() WGCNA::bicorAndPvalue(). getMEtraitCor() can also used calculate pairwise correlation coefficients p-values module eigennode values (see examples).","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getMEtraitCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Correlation Statistics Between Module Eigennodes and Traits — getMEtraitCor","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Test Correlations between Module Eigennodes and Sample Traits MEs <- modules$MEs MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\",                             file = \"ME_Trait_Correlation_Stats.txt\")  # Examine Correlations between Modules moduleCorStats <- getMEtraitCor(MEs, colData = MEs, corType = \"bicor\",                                 robustY = TRUE,                                 file = \"Module_Correlation_Stats.txt\")  # Examine Correlations between Sample Traits traitDendro <- getCor(MEs, y = colData, corType = \"bicor\",                       robustY = FALSE) %>%         getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08),            file = \"Trait_Dendrogram.pdf\")  # Visualize Correlations between Module Eigennodes and Sample Traits moduleDendro <- getDendro(MEs, distance = \"bicor\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order,                file = \"ME_Trait_Correlation_Heatmap.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order, topOnly = TRUE,                label.type = \"p\", label.size = 4, label.nudge_y = 0,                legend.position = c(1.11, 0.795),                colColorMargins = c(-1,4.75,0.5,10.1),                file = \"Top_ME_Trait_Correlation_Heatmap.pdf\", width = 8.5,                height = 4.25) }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Module BED file — getModuleBED","title":"Get a Module BED file — getModuleBED","text":"getModuleBED() takes data.frame regions module annotations, converts BED file format suitable viewing UCSC Genome Browser, saves .","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Module BED file — getModuleBED","text":"","code":"getModuleBED(   regions,   grey = FALSE,   save = TRUE,   file = \"Modules.bed\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Module BED file — getModuleBED","text":"regions data.frame regions module assignments, typically obtained getModules(). grey logical(1) specifying whether include \"grey\" (unassigned) regions BED file. save logical(1) indicating whether save BED file. file character(1) giving file name (.BED). verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Module BED file — getModuleBED","text":"BED file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a Module BED file — getModuleBED","text":"getModuleBED() designed used combination getModules(). BED file produced includes header line enable single-step viewing UCSC Genome Browser. region labeled RegionID assigned module, colored module color. \"Grey\" (unassigned) regions excluded default, can optionally included.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getModuleBED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Module BED file — getModuleBED","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Visualize Comethylation Modules plotRegionDendro(modules, file = \"Region_Dendrograms.pdf\") BED <- getModuleBED(modules$regions, file = \"Modules.bed\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Module Preservation — getModulePreservation","title":"Calculate Module Preservation — getModulePreservation","text":"getModulePreservation() examines module replication reference test data set estimating various preservation statistics, saved .txt file. Correlations performed using either pearson bicor methods.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Module Preservation — getModulePreservation","text":"","code":"getModulePreservation(   meth_disc,   regions_disc,   meth_rep,   regions_rep,   corType = c(\"pearson\", \"bicor\"),   maxPOutliers = 0.1,   nPermutations = 100,   save = TRUE,   file = \"Module_Preservation_Stats.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Module Preservation — getModulePreservation","text":"meth_disc numeric matrix, row sample column region. typically obtained adjustRegionMeth() related discovery (reference) data set. regions_disc data.frame regions module assignments, typically obtained getModules() related discovery data set. meth_rep numeric matrix, row sample column region. typically obtained adjustRegionMeth() related replication (test) data set. regions_rep data.frame regions module assignments, typically obtained getModules() related replication data set. corType character(1) indicating correlation statistic use adjacency calculation. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. nPermutations numeric(1) indicating number permutations perform permutation test. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Module Preservation — getModulePreservation","text":"data.frame giving preservation statistics module discovery data set.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Module Preservation — getModulePreservation","text":"Identical sets regions assessed assigned modules within discovery (reference) replication (test) data sets, though replication regions may subset discovery regions due low coverage. also recommended filter CpGs identical loci also assessed within regions. Network parameters similar possible, although modules identified independently discovery replication datasets. Preservation statistics calculated WGCNA::modulePreservation(), corFnc set either cor bicor. information given documentation WGCNA::modulePreservation().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getModulePreservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Module Preservation — getModulePreservation","text":"","code":"if (FALSE) { # Calculate Module Preservation regions_disc <- modules_disc$regions regions_rep <- modules_rep$regions preservation <- getModulePreservation(methAdj_disc,                                       regions_disc = regions_disc,                                       meth_rep = methAdj_rep,                                       regions_rep = regions_rep,                                       corType = \"pearson\",                                       file = \"Module_Preservation_Stats.txt\")  # Visualize Module Preservation plotModulePreservation(preservation, file = \"Module_Preservation_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Modules of Comethylated Regions — getModules","title":"Identify Modules of Comethylated Regions — getModules","text":"getModules() builds comethylation network, identifies comethylated modules, outputs list region module assignments, eigennode values, dendrograms, module membership, saves .rds file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Modules of Comethylated Regions — getModules","text":"","code":"getModules(   meth,   power,   regions,   maxBlockSize = 40000,   corType = c(\"pearson\", \"bicor\"),   maxPOutliers = 0.1,   deepSplit = 4,   minModuleSize = 10,   mergeCutHeight = 0.1,   nThreads = 4,   save = TRUE,   file = \"Modules.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Modules of Comethylated Regions — getModules","text":"meth numeric matrix, row sample column region. typically obtained adjustRegionMeth(). power numeric(1) giving soft-thresholding power. typically obtained getSoftPower(). regions data.frame regions, typically filtering filterRegions(). Must column RegionID correspond regions meth. maxBlockSize numeric(1) specifying maximum number regions block. number regions, regions pre-clustered blocks using projective K-means clustering. Decrease memory insufficient. corType character(1) indicating correlation statistic use adjacency calculation. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. deepSplit numeric(1) specifying sensitivity module detection. Possible values integers 0 4, 4 highest sensitivity. minModuleSize numeric(1) giving minimum number regions qualify module. mergeCutHeight numeric(1) specifying cut height merging correlated modules. Value maximum dissimilarity (1 - correlation) ranges 0 1. nThreads numeric(1) indicating number threads correlation calculations. save logical(1) indicating whether save list. file character(1) giving file name (.rds) saved list. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Modules of Comethylated Regions — getModules","text":"list 11 elements. See WGCNA::blockwiseModules()description . Additional regions element data.frame region locations, statistics, module assignment, module membership, hub region status.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Modules of Comethylated Regions — getModules","text":"Comethylation networks built modules identified WGCNA::blockwiseModules(), corType set either pearson bicor. Calculations performed signed network blocks regions maximum size maxBlockSize (default = 40000). maxBlocksize regions, regions pre-clustered blocks using projective K-means clustering. Region correlations performed within block regions clustered average linkage hierarchical clustering. Modules identified dynamic hybrid tree cut highly correlated modules merged together. information given documentation WGCNA::blockwiseModules().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getModules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Modules of Comethylated Regions — getModules","text":"","code":"if (FALSE) {  # Get Methylation Data meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\")  # Adjust Methylation Data for PCs mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod,                             file = \"Adjusted_Region_Methylation.rds\")  # Select Soft Power Threshold sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Visualize Comethylation Modules plotRegionDendro(modules, file = \"Region_Dendrograms.pdf\") BED <- getModuleBED(modules$regions, file = \"Modules.bed\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Region Methylation Data — getRegionMeth","title":"Get Region Methylation Data — getRegionMeth","text":"getRegionMeth() extracts methylation values specified regions samples saves .rds file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Region Methylation Data — getRegionMeth","text":"","code":"getRegionMeth(   regions,   bs,   type = c(\"raw\", \"smooth\"),   save = TRUE,   file = \"Region_Methylation.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Region Methylation Data — getRegionMeth","text":"regions data.frame regions, typically filtering filterRegions(). Must columns chr, start, end. bs BSseq object, typically filtering filterCpGs(). type character(1) specifying type methylation values extract. Accepted values raw smooth save logical(1) indicating whether save matrix. file character(1) giving file name (.rds) saved matrix. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Region Methylation Data — getRegionMeth","text":"numeric matrix, row region column sample.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Region Methylation Data — getRegionMeth","text":"Methylation summarized region level, estimated methylated reads divided total reads. Methylation values obtained BSseq object can either raw smoothed methylation.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionMeth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Region Methylation Data — getRegionMeth","text":"","code":"if (FALSE) {  # Get Methylation Data meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\")  # Adjust Methylation Data for PCs mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod,                             file = \"Adjusted_Region_Methylation.rds\")  # Assess Sample Similarity getDendro(methAdj, distance = \"euclidean\") %>%         plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08)) }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Region Totals at Different Cutoffs — getRegionTotals","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"getRegionTotals() calculates total number regions, well total width number CpGs remaining region set filtering different covMin methSD cutoffs saves tab-delimited text file.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"","code":"getRegionTotals(   regions,   covMin = seq(0, 20, 2),   methSD = seq(0, 0.1, 0.01),   save = TRUE,   file = \"Region_Totals.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"regions data.frame output getRegions() giving set regions statistics region. covMin numeric specifying minimum number reads CpGs region sample region included total. methSD numeric specifying minimum methylation standard deviation region included total. save logical(1) indicating whether save data.frame file character(1) giving file name (.txt) saved data.frame verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"data.frame giving total number regions, width, number CpGs combinations covMin methSD.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"purpose function help balance cutoffs minimum coverage methylation standard deviation identify robust set variably methylated regions. recommended input multiple covMin methSD cutoffs comparison. Computational resources also consideration network construction, region sets 250K less generally performing well.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegionTotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Region Totals at Different Cutoffs — getRegionTotals","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Regions from CpGs — getRegions","title":"Generate Regions from CpGs — getRegions","text":"getRegions() generates set regions statistics based CpGs BSseq object saves tab-delimited text file. Regions can defined based CpG locations (CpG clusters), built-genomic annotations annotatr, custom genomic annotation.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Regions from CpGs — getRegions","text":"","code":"getRegions(   bs,   annotation = NULL,   genome = c(\"hg38\", \"hg19\", \"mm10\", \"mm9\", \"rn6\", \"rn5\", \"rn4\", \"dm6\", \"dm3\",     \"galGal5\"),   upstream = 5000,   downstream = 1000,   custom = NULL,   maxGap = 150,   n = 3,   save = TRUE,   file = \"Unfiltered_Regions.txt\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Regions from CpGs — getRegions","text":"bs BSseq object. annotation character(1) giving built-genomic annotation use defining regions. Shortcuts available genes, promoters, transcripts. Get entire list possible annotations annotatr::builtin_annotations(), also includes CpG islands, enhancers, chromatin states. genome character(1) genome build use built-annotations. Available builds include hg38, hg19, mm10, mm9, rn6, rn5, rn4, dm6, dm3, galGal5. upstream numeric(1) giving number bases upstream transcription start site specify promoter. Used promoters built-annotation. downstream numeric(1) giving number bases downstream transcription start site specify promoter. Used promoters built-annotation. custom GRanges object custom genomic annotation defining regions. Construct using GenomicRanges::GRanges(). maxGap numeric(1) specifying maximum number bases CpGs included CpG cluster. n numeric(1) giving minimum number CpGs region returned. applies CpG clusters, built-, custom, annotations. save logical(1) indicating whether save data.frame. file character(1) giving file name (.txt) saved data.frame. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Regions from CpGs — getRegions","text":"data.frame region genomic locations along statistics, including number CpGs, coverage minimum, mean, standard deviation, methylation mean standard deviation.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Regions from CpGs — getRegions","text":"regions still need filtered minimum coverage methylation standard deviation.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Regions from CpGs — getRegions","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Soft Power Threshold — getSoftPower","title":"Estimate Soft Power Threshold — getSoftPower","text":"getSoftPower() analyzes scale-free topology estimate best soft-thresholding power vector powers, calculate fit indices, saves .rds file. Possible correlation statistics include pearson bicor.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Soft Power Threshold — getSoftPower","text":"","code":"getSoftPower(   meth,   powerVector = 1:20,   corType = c(\"pearson\", \"bicor\"),   maxPOutliers = 0.1,   RsquaredCut = 0.8,   blockSize = 40000,   gcInterval = blockSize - 1,   save = TRUE,   file = \"Soft_Power.rds\",   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Soft Power Threshold — getSoftPower","text":"meth numeric matrix, row sample column region. typically obtained adjustRegionMeth(). powerVector numeric specifying soft power thresholds examine scale-free topology. corType character(1) indicating correlation statistic use adjacency calculation. maxPOutliers numeric(1) specifying maximum percentile can considered outliers side median bicor statistic. RsquaredCut numeric(1) giving minimum R-squared value scale-free topology. Used choose best soft-thresholding power. blockSize numeric(1) specifying number regions block connectivity calculation. Decrease memory insufficient. gcInterval numeric(1) indicating interval garbage collection. save logical(1) indicating whether save list. file character(1) giving file name (.rds) saved list. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Soft Power Threshold — getSoftPower","text":"list two elements: powerEstimate, gives estimated best soft-thresholding power, fitIndices, data.frame statistics scale-free topology, including fit connectivity, along network density, centralization, heterogeneity.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Soft Power Threshold — getSoftPower","text":"Soft power estimated WGCNA::pickSoftThreshold(), corFnc set either cor bicor. Calculations performed signed network blocks regions size blockSize (default = 40000). best soft power threshold chosen lowest power fit (R-squared) greater RsquaredCut (default = 0.8). information given documentation WGCNA::pickSoftThreshold().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/getSoftPower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Soft Power Threshold — getSoftPower","text":"","code":"if (FALSE) {  # Get Methylation Data meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\")  # Adjust Methylation Data for PCs mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod,                             file = \"Adjusted_Region_Methylation.rds\")  # Select Soft Power Threshold sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Ontologies Available in GREAT — listOntologies","title":"Get Ontologies Available in GREAT — listOntologies","text":"listOntologies() obtains character vector available ontologies functional enrichment analysis GREAT specified version genome build.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Ontologies Available in GREAT — listOntologies","text":"","code":"listOntologies(   genome = c(\"hg38\", \"hg19\", \"hg18\", \"mm10\", \"mm9\", \"danRer7\"),   version = c(\"4.0.4\", \"3.0.0\", \"2.0.2\"),   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Ontologies Available in GREAT — listOntologies","text":"genome character(1) giving genome build. Supported genomes include hg38, hg19, hg18, mm10, mm9, danRer7. See Details. version character(1) specifying version GREAT. Possible values include 4.0.4, 3.0.0, 2.0.2. Different versions GREAT support different genomes. See Details. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Ontologies Available in GREAT — listOntologies","text":"character vector.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Ontologies Available in GREAT — listOntologies","text":"listOntologies() generates possible ontologies use functional enrichment analysis enrichModule(). Supported ontologies may change time, function queries GREAT using rGREAT package get ones currently available. GREAT supports different genomes depending version: GREAT v4.0.4 hg38, hg19, mm10, mm9 GREAT v3.0.0 hg19, mm10, mm9, danRer7 GREAT v2.0.2 hg19, hg18, mm9, danRer7","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/listOntologies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Ontologies Available in GREAT — listOntologies","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Annotate Modules regionsAnno <- annotateModule(regions, module = \"bisque4\",                               genome = \"hg38\",                               file = \"Annotated_bisque4_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\")  # Analyze Functional Enrichment ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\",                                genome = \"hg38\",                                file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4,                file = \"bisque4_Module_Enrichment_Plot.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"plotCpGtotals() plots number CpGs remaining filtering different combinations cov perSample line plot saves pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"","code":"plotCpGtotals(   CpGtotals,   nBreaks = 4,   legend.position = c(1.08, 0.73),   save = TRUE,   file = \"CpG_Totals.pdf\",   width = 11,   height = 4.25,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"CpGtotals data.frame, output getCpGtotals(). nBreaks numeric(1) specifying number breaks used axes legend. legend.position numeric(2) specifying position legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"plotCpGtotals() designed used combination getCpGtotals(). ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotCpGtotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Total CpGs at Different Coverage Cutoffs — plotCpGtotals","text":"","code":"if (FALSE) {  # Read Bismark CpG Reports colData <- read.xlsx(\"sample_info.xlsx\", rowNames = TRUE) bs <- getCpGs(colData, file = \"Unfiltered_BSseq.rds\")  # Examine CpG Totals at Different Cutoffs CpGtotals <- getCpGtotals(bs, file = \"CpG_Totals.txt\") plotCpGtotals(CpGtotals, file = \"CpG_Totals.pdf\")  # Filter BSseq Object bs <- filterCpGs(bs, cov = 2, perSample = 0.75, file = \"Filtered_BSseq.rds\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Dendrogram — plotDendro","title":"Plot a Dendrogram — plotDendro","text":"plotDendro() extracts plotting data stats::hclust object, plots dendrogram, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Dendrogram — plotDendro","text":"","code":"plotDendro(   dendro,   label = TRUE,   labelSize = 2.5,   expandX = c(0.03, 0.03),   expandY = c(0.3, 0.08),   nBreaks = 4,   save = TRUE,   file = \"Dendrogram.pdf\",   width = 11,   height = 4.25,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Dendrogram — plotDendro","text":"dendro stats::hclust object generated getDendro(). label logical(1) indicating whether add labels dendrogram. labelSize numeric(1) specifying size label text. expandX numeric(2) giving x-axis multiplicative range expansion factors upper limit, lower limit. expandY numeric(2) giving y-axis multiplicative range expansion factors upper limit, lower limit. nBreaks numeric(1) specifying number breaks used y-axis. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Dendrogram — plotDendro","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Dendrogram — plotDendro","text":"plotDendro() designed used combination getDendro(). ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotDendro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Dendrogram — plotDendro","text":"","code":"if (FALSE) {  # Assess Sample Similarity getDendro(methAdj, distance = \"euclidean\") %>%         plotDendro(file = \"Sample_Dendrogram.pdf\", expandY = c(0.25,0.08))  # Examine Correlations between Modules moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 4, nBreaks = 5,            file = \"Module_ME_Dendrogram.pdf\")  # Characterize Correlations between Samples sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5,            file = \"Sample_ME_Dendrogram.pdf\")  # Examine Correlations between Traits traitDendro <- getCor(MEs, y = colData, corType = \"bicor\",                       robustY = FALSE) %>%         getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08),            file = \"Trait_Dendrogram.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Functional Enrichment Results — plotEnrichment","title":"Plot Functional Enrichment Results — plotEnrichment","text":"plotEnrichment() takes data.frame enrichment results enrichModule(), plots log p-values bar plot, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Functional Enrichment Results — plotEnrichment","text":"","code":"plotEnrichment(   enrichment,   nTerms = 15,   fill = \"#132B43\",   xlim = NULL,   nBreaks = 4,   axis.title.x.size = 20,   axis.text.x.size = 16,   axis.text.y.size = 16,   save = TRUE,   file = \"Module_Enrichment_Plot.pdf\",   width = 8,   height = 6,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Functional Enrichment Results — plotEnrichment","text":"enrichment data.frame functional enrichment results, typically obtained enrichModule(). nTerms numeric(1) specifying number terms include plot. fill character(1) giving color bars. xlim numeric(2) specifying limits x-axis. nBreaks numeric(1) indicating number breaks use x-axis. axis.title.x.size numeric(1) size x-axis title. axis.text.x.size numeric(1) giving size x-axis text. axis.text.y.size numeric(1) giving size y-axis text. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Functional Enrichment Results — plotEnrichment","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Functional Enrichment Results — plotEnrichment","text":"plotEnrichment() designed used combination enrichModule(). top 15 gene sets plotted default, can expanded needed. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotEnrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Functional Enrichment Results — plotEnrichment","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Annotate Modules regionsAnno <- annotateModule(regions, module = \"bisque4\",                               genome = \"hg38\",                               file = \"Annotated_bisque4_Module_Regions.txt\") geneList_bisque4 <- getGeneList(regionsAnno, module = \"bisque4\")  # Analyze Functional Enrichment ontologies <- listOntologies(\"hg38\", version = \"4.0.4\") enrich_bisque4 <- enrichModule(regions, module = \"bisque4\",                                genome = \"hg38\",                                file = \"bisque4_Module_Enrichment.txt\") plotEnrichment(enrich_bisque4,                file = \"bisque4_Module_Enrichment_Plot.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Heatmap with Dendrograms — plotHeatmap","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"plotHeatmap() takes numeric matrix two dendrograms, plots , saves .pdf. row names column names x must include set values labels rowDendro colDendro, respectively.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"","code":"plotHeatmap(   x,   rowDendro,   colDendro,   colors = blueWhiteRed(100, gamma = 0.3),   limit = max(abs(x)),   axis.text.size = 8,   legend.title = \"Bicor\",   legend.title.size = 16,   legend.text.size = 12,   legend.position = c(0.3, 0.905),   rowDendroMargins = c(-1.55, 1, -0.1, -1.1),   colDendroMargins = c(1, -0.5, -1, 0.8),   rowColorMargins = c(-1.85, -1.5, 0.55, 1.7),   colColorMargins = c(-1.6, -0.85, 1.8, 0.55),   save = TRUE,   file = \"Heatmap.pdf\",   width = 11,   height = 9.5,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"x numeric matrix. row names column names x must include set values labels rowDendro colDendro, respectively. rowDendro stats::hclust object generated getDendro(). colDendro stats::hclust object generated getDendro(). colors character giving vector colors use gradient heatmap. default uses WGCNA::blueWhiteRed() generate colors. limit numeric(1) giving maximum value (symmetric) heatmap color scale. axis.text.size numeric(1) specifying size text axes. legend.title character(1) title legend. legend.title.size numeric(1) giving size text legend title. legend.text.size numeric(1) specifying size text legend axis. legend.position numeric(2) position legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". rowDendroMargins numeric(4) giving width margins row (vertical) dendrogram top, right, bottom, left. colDendroMargins numeric(4) giving width margins column (horizontal) dendrogram top, right, bottom, left. rowColorMargins numeric(4) giving width margins row (vertical) color bar top, right, bottom, left. colColorMargins numeric(4) giving width margins column (horizontal) color bar top, right, bottom, left. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"plotHeatmap() designed used combination getCor() getDendro(). function check see module color names row column names plot color bar module colors. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Heatmap with Dendrograms — plotHeatmap","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Examine Correlations between Modules MEs <- modules$MEs moduleDendro <- getDendro(MEs, distance = \"bicor\") plotDendro(moduleDendro, labelSize = 4, nBreaks = 5,            file = \"Module_ME_Dendrogram.pdf\") moduleCor <- getCor(MEs, corType = \"bicor\") plotHeatmap(moduleCor, rowDendro = moduleDendro, colDendro = moduleDendro,             file = \"Module_Correlation_Heatmap.pdf\")  # Examine Correlations between Samples sampleDendro <- getDendro(MEs, transpose = TRUE, distance = \"bicor\") plotDendro(sampleDendro, labelSize = 3, nBreaks = 5,            file = \"Sample_ME_Dendrogram.pdf\") sampleCor <- getCor(MEs, transpose = TRUE, corType = \"bicor\") plotHeatmap(sampleCor, rowDendro = sampleDendro, colDendro = sampleDendro,             file = \"Sample_Correlation_Heatmap.pdf\")  # Visualize Module Eigennode Values plotHeatmap(MEs, rowDendro = sampleDendro, colDendro = moduleDendro,             legend.title = \"Module\\nEigennode\",             legend.position = c(0.37,0.89),             file = \"Sample_ME_Heatmap.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"plotMEtraitCor() takes data.frame correlation statistics module eigennodes traits getMEtraitCor(), plots heatmap, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"","code":"plotMEtraitCor(   MEtraitCor,   moduleOrder = 1:length(unique(MEtraitCor$module)),   traitOrder = 1:length(unique(MEtraitCor$trait)),   topOnly = FALSE,   nTop = 15,   p = 0.05,   label.type = c(\"star\", \"p\"),   label.size = 8,   label.nudge_y = -0.38,   colors = blueWhiteRed(100, gamma = 0.9),   limit = NULL,   axis.text.size = 12,   legend.position = c(1.08, 0.915),   legend.text.size = 12,   legend.title.size = 16,   colColorMargins = c(-0.7, 4.21, 1.2, 11.07),   save = TRUE,   file = \"ME_Trait_Correlation_Heatmap.pdf\",   width = 11,   height = 9.5,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"MEtraitCor data.frame correlation statistics module-trait pairs, typically generated getMEtraitCor(). moduleOrder numeric specifying order modules heatmap. must length number unique modules MEtraitCor. traitOrder numeric specifying order traits heatmap. must length number unique traits MEtraitCor. topOnly logical(1) indicating whether plot modules traits significant correlations, ranked p-value. nTop numeric(1) specifying number top module-trait associations include. p numeric(1) giving threshold p-value assign significant correlation. label.type character(1) giving type label (star p) use annotate significant correlations. label.size numeric(1) specifying size label text annotating significant correlations. label.nudge_y numeric(1) giving amount adjust position label text y-axis. colors character giving vector colors use gradient heatmap. default uses WGCNA::blueWhiteRed() generate colors. limit numeric(1) giving maximum value (symmetric) heatmap color scale. axis.text.size numeric(1) specifying size text y-axis. legend.position numeric(2) position legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". legend.text.size numeric(1) specifying size text legend axis. legend.title.size numeric(1) giving size text legend title. colColorMargins numeric(4) giving width margins column (horizontal) color bar top, right, bottom, left. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"plotMEtraitCor() designed used combination getMEtraitCor(). Stars p-values used annotate significant correlations, defined p-value threshold. heatmap can optionally filtered include modules traits significant associations, ranked p-value. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Heatmap of Correlations Between Module Eigennodes and Traits — plotMEtraitCor","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Test Correlations between Module Eigennodes and Sample Traits MEs <- modules$MEs MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\",                             file = \"ME_Trait_Correlation_Stats.txt\")  # Examine Correlations between Sample Traits traitDendro <- getCor(MEs, y = colData, corType = \"bicor\",                       robustY = FALSE) %>%         getDendro(transpose = TRUE) plotDendro(traitDendro, labelSize = 3.5, expandY = c(0.65,0.08),            file = \"Trait_Dendrogram.pdf\")  # Visualize Correlations between Module Eigennodes and Sample Traits moduleDendro <- getDendro(MEs, distance = \"bicor\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order,                file = \"ME_Trait_Correlation_Heatmap.pdf\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order, topOnly = TRUE,                label.type = \"p\", label.size = 4, label.nudge_y = 0,                legend.position = c(1.11, 0.795),                colColorMargins = c(-1,4.75,0.5,10.1),                file = \"Top_ME_Trait_Correlation_Heatmap.pdf\", width = 8.5,                height = 4.25) }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"plotMEtraitDot() takes vector module eigennode values vector categorical sample trait values, generates dot plot, saves .pdf. trait must order.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"","code":"plotMEtraitDot(   ME,   trait,   traitCode = NULL,   colors = NULL,   fun.data = c(\"median_hilow\", \"mean_cl_boot\", \"mean_cl_normal\", \"mean_sdl\"),   fun.args = list(conf.int = 0.5),   binwidth = 0.01,   stackratio = 1.4,   dotsize = 0.85,   ylim = NULL,   nBreaks = 4,   axis.title.size = 20,   axis.text.size = 16,   xlab = \"Trait\",   ylab = \"Module Eigennode\",   save = TRUE,   file = \"ME_Trait_Dotplot.pdf\",   width = 6,   height = 6,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"numeric module eigennode values. must order trait. trait numeric categorical sample trait values. traitCode named numeric vector matching trait level numeric value. Example: c(\"Control\" = 0, \"Treatment\" = 1). colors named character vector matching trait level color. Example: c(\"Control\" = \"blue\", \"Treatment\" = \"red\"). fun.data character(1) specifying summary function use. Potential values include median_hilow, mean_cl_boot, mean_cl_normal, mean_sdl. fun.args list giving additional arguments summary function. binwidth numeric(1) specifying maximum bin width. stackratio numeric(1) indicating far apart stack dots. dotsize numeric(1) giving size dots relative binwidth. ylim numeric(2) specifying limits y-axis. nBreaks numeric(1) giving number breaks y-axis. axis.title.size numeric(1) indicating size title text axes. axis.text.size numeric(1) specifying size text axes. xlab character(1) giving x-axis title. ylab character(1) giving y-axis title. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"NA values trait removed present, along corresponding values. Data summarized like box plot (median, Q1, Q3) default, can also summarized methods. See ggplot2::stat_summary() details. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitDot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a Module Eigennode - Trait Correlation as a Dot Plot — plotMEtraitDot","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Test Correlations between Module Eigennodes and Sample Traits MEs <- modules$MEs MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\",                             file = \"ME_Trait_Correlation_Stats.txt\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order,                file = \"ME_Trait_Correlation_Heatmap.pdf\")  # Explore Individual ME-Trait Correlations plotMEtraitDot(MEs$bisque4, trait = colData$Diagnosis_ASD,                traitCode = c(\"TD\" = 0, \"ASD\" = 1),                colors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),                ylim = c(-0.2,0.2), xlab = \"Diagnosis\",                ylab = \"Bisque 4 Module Eigennode\",                file = \"bisque4_ME_Diagnosis_Dotplot.pdf\") plotMEtraitScatter(MEs$paleturquoise, trait = colData$Gran,                    ylim = c(-0.15,0.15), xlab = \"Granulocytes\",                    ylab = \"Pale Turquoise Module Eigennode\",                    file = \"paleturquoise_ME_Granulocytes_Scatterplot.pdf\") regions <- modules$regions plotMethTrait(\"bisque4\", regions = regions, meth = meth,               trait = colData$Diagnosis_ASD,               traitCode = c(\"TD\" = 0, \"ASD\" = 1),               traitColors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),               trait.legend.title = \"Diagnosis\",               file = \"bisque4_Module_Methylation_Diagnosis_Heatmap.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"plotMEtraitScatter() takes vector module eigennode values vector continuous sample trait values, generates scatter plot, saves .pdf. trait must order.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"","code":"plotMEtraitScatter(   ME,   trait,   color = \"#132B43\",   xlim = NULL,   ylim = NULL,   nBreaks = 4,   point.size = 2.5,   axis.title.size = 20,   axis.text.size = 16,   xlab = \"Trait\",   ylab = \"Module Eigennode\",   save = TRUE,   file = \"ME_Trait_Scatterplot.pdf\",   width = 6,   height = 6,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"numeric module eigennode values. must order trait. trait numeric continuous sample trait values. color character(1) giving color points. xlim numeric(2) specifying limits x-axis. ylim numeric(2) specifying limits y-axis. nBreaks numeric(1) giving number breaks axes. point.size numeric(1) indicating size points. axis.title.size numeric(1) indicating size title text axes. axis.text.size numeric(1) specifying size text axes. xlab character(1) giving x-axis title. ylab character(1) giving y-axis title. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"values trait plotted points along smoothed line shaded 95% confidence interval. smoothed line fit using robust regression implemented MASS::rlm(). ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMEtraitScatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a Module Eigennode - Trait Correlation as a Scatter Plot — plotMEtraitScatter","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Test Correlations between Module Eigennodes and Sample Traits MEs <- modules$MEs MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\",                             file = \"ME_Trait_Correlation_Stats.txt\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order,                file = \"ME_Trait_Correlation_Heatmap.pdf\")  # Explore Individual ME-Trait Correlations plotMEtraitDot(MEs$bisque4, trait = colData$Diagnosis_ASD,                traitCode = c(\"TD\" = 0, \"ASD\" = 1),                colors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),                ylim = c(-0.2,0.2), xlab = \"Diagnosis\",                ylab = \"Bisque 4 Module Eigennode\",                file = \"bisque4_ME_Diagnosis_Dotplot.pdf\") plotMEtraitScatter(MEs$paleturquoise, trait = colData$Gran,                    ylim = c(-0.15,0.15), xlab = \"Granulocytes\",                    ylab = \"Pale Turquoise Module Eigennode\",                    file = \"paleturquoise_ME_Granulocytes_Scatterplot.pdf\") regions <- modules$regions plotMethTrait(\"bisque4\", regions = regions, meth = meth,               trait = colData$Diagnosis_ASD,               traitCode = c(\"TD\" = 0, \"ASD\" = 1),               traitColors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),               trait.legend.title = \"Diagnosis\",               file = \"bisque4_Module_Methylation_Diagnosis_Heatmap.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"plotMethTrait() extracts methylation values regions given module, plots sample trait heatmap, saves .pdf. trait must order columns meth.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"","code":"plotMethTrait(   module,   regions,   meth,   trait,   discrete = NULL,   traitCode = NULL,   traitColors = NULL,   heatmapColors = blueWhiteRed(100, gamma = 0.3),   limit = NULL,   expandY = 0.05,   axis.text.size = 11,   heatmap.legend.position = c(1.1, 0.743),   trait.legend.position = c(1.017, 4.39),   heatmap.legend.title = \"Relative\\nMethylation (%)\",   trait.legend.title = \"Trait\",   legend.text.size = 11,   legend.title.size = 14,   heatmapMargins = c(1, 8, 0, 1),   traitMargins = c(0, 6, 1, 5.15),   save = TRUE,   file = \"Module_Methylation_Trait_Heatmap.pdf\",   width = 11,   height = 4,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"module character(1) giving name module plot. regions data.frame regions module assignments, typically obtained getModules(). meth numeric matrix, row region column sample. typically obtained getRegionMeth(). trait numeric sample trait values. discrete logical(1) identifying trait discrete variable . null, plotMethTrait() guess trait discrete (<= 5 unique values). traitCode named numeric vector matching trait level numeric value. Example: c(\"Control\" = 0, \"Treatment\" = 1). traitColors named character vector matching trait level color. Example: c(\"Control\" = \"blue\", \"Treatment\" = \"red\"). heatmapColors character giving vector colors use gradient heatmap. default uses WGCNA::blueWhiteRed() generate colors. limit numeric(1) giving maximum value (symmetric) heatmap color scale. expandY numeric specifying multiplicative range expansion factors. Can given symmetric lower upper limit expansions separately vector length 2. axis.text.size numeric(1) giving size text y-axis. heatmap.legend.position numeric(2) position heatmap legend, x-axis, y-axis. May also  character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". trait.legend.position numeric(2) position color bar legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". heatmap.legend.title character(1) giving title heatmap legend. trait.legend.title character(1) giving title color bar legend. legend.text.size numeric(1) indicating size text legends. legend.title.size numeric(1) specifying size text legend titles. heatmapMargins numeric(4) giving width margins heatmap top, right, bottom, left. traitMargins numeric(4) giving width margins color bar top, right, bottom, left. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"NA values trait removed present, along corresponding values. discrete provided plotMethTrait() guess trait discrete (<= 5 unique values) plot trait color discrete scale rather continuous one. Samples ordered trait value ascending order. Methylation values plotted relative mean methylation region.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotMethTrait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Module Methylation Values By a Sample Trait — plotMethTrait","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Test Correlations between Module Eigennodes and Sample Traits MEs <- modules$MEs MEtraitCor <- getMEtraitCor(MEs, colData = colData, corType = \"bicor\",                             file = \"ME_Trait_Correlation_Stats.txt\") plotMEtraitCor(MEtraitCor, moduleOrder = moduleDendro$order,                traitOrder = traitDendro$order,                file = \"ME_Trait_Correlation_Heatmap.pdf\")  # Explore Individual ME-Trait Correlations plotMEtraitDot(MEs$bisque4, trait = colData$Diagnosis_ASD,                traitCode = c(\"TD\" = 0, \"ASD\" = 1),                colors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),                ylim = c(-0.2,0.2), xlab = \"Diagnosis\",                ylab = \"Bisque 4 Module Eigennode\",                file = \"bisque4_ME_Diagnosis_Dotplot.pdf\") plotMEtraitScatter(MEs$paleturquoise, trait = colData$Gran,                    ylim = c(-0.15,0.15), xlab = \"Granulocytes\",                    ylab = \"Pale Turquoise Module Eigennode\",                    file = \"paleturquoise_ME_Granulocytes_Scatterplot.pdf\") regions <- modules$regions plotMethTrait(\"bisque4\", regions = regions, meth = meth,               trait = colData$Diagnosis_ASD,               traitCode = c(\"TD\" = 0, \"ASD\" = 1),               traitColors = c(\"TD\" = \"#3366CC\", \"ASD\" = \"#FF3366\"),               trait.legend.title = \"Diagnosis\",               file = \"bisque4_Module_Methylation_Diagnosis_Heatmap.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Module Preservation — plotModulePreservation","title":"Visualize Module Preservation — plotModulePreservation","text":"plotModulePreservation() plots Z-scores various module preservation statistics module size scatterplot, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Module Preservation — plotModulePreservation","text":"","code":"plotModulePreservation(   preservation,   line.size = 0.9,   point.size = 1.2,   nBreaks = 3,   strip.text.size = 8.5,   axis.text.size = 10,   axis.title.size = 12,   save = TRUE,   file = \"Module_Preservation_Plots.pdf\",   width = 9,   height = 9,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Module Preservation — plotModulePreservation","text":"preservation data.frame module preservation statistics module, generated getModulePreservation(). line.size numeric(1) giving size horizontal lines. point.size numeric(1) indicating size points. nBreaks numeric(1) specifying number breaks used axes. strip.text.size numeric(1) indicating size title text plot. axis.text.size numeric(1) specifying size text axes. axis.title.size numeric(1) indicating size title text axes. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Module Preservation — plotModulePreservation","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Module Preservation — plotModulePreservation","text":"plotModulePreservation() designed used combination getModulePreservation(). blue line plotted Z = 2 indicate weak moderate evidence preservation, green line plotted Z = 10 indicate strong evidence. ggplot object produced can edited outside function desired. information given documentation WGCNA::modulePreservation().","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotModulePreservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Module Preservation — plotModulePreservation","text":"","code":"if (FALSE) { # Calculate Module Preservation regions_disc <- modules_disc$regions regions_rep <- modules_rep$regions preservation <- getModulePreservation(methAdj_disc,                                       regions_disc = regions_disc,                                       meth_rep = methAdj_rep,                                       regions_rep = regions_rep,                                       corType = \"pearson\",                                       file = \"Module_Preservation_Stats.txt\")  # Visualize Module Preservation plotModulePreservation(preservation, file = \"Module_Preservation_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Region Dendrograms — plotRegionDendro","title":"Plot Region Dendrograms — plotRegionDendro","text":"plotRegionDendro() extracts plotting data modules list, plots region dendrogram module assignments, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Region Dendrograms — plotRegionDendro","text":"","code":"plotRegionDendro(   modules,   save = TRUE,   file = \"Region_Dendrograms.pdf\",   width = 11,   height = 4.25,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Region Dendrograms — plotRegionDendro","text":"modules list module assignments statistics produced getModules(). save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Region Dendrograms — plotRegionDendro","text":"None, produces plot side effect.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Region Dendrograms — plotRegionDendro","text":"plotRegionDendro() designed used combination getModules(). function produce ggplot object, instead uses WGCNA::plotDendroAndColors() plot dendrogram.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionDendro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Region Dendrograms — plotRegionDendro","text":"","code":"if (FALSE) {  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\")  # Visualize Comethylation Modules plotRegionDendro(modules, file = \"Region_Dendrograms.pdf\") BED <- getModuleBED(modules$regions, file = \"Modules.bed\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Histograms of Region Statistics — plotRegionStats","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"plotRegionStats() takes set regions getRegions(), generates histograms region characteristics, saves pdf. Region-level statistics include width, number CpGs, minimum coverage, mean coverage, mean methylation, methylation standard deviation.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"","code":"plotRegionStats(   regions,   maxQuantile = 1,   bins = 30,   histCol = \"#132B43\",   lineCol = \"red\",   nBreaks = 4,   save = TRUE,   file = \"Region_Plots.pdf\",   width = 11,   height = 8.5,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"regions data.frame output getRegions() giving set regions statistics region. maxQuantile numeric(1) giving maximum quantile feature plot. bins numeric(1) specifying number bins histogram. histCol character(1) giving color histogram. lineCol character(1) giving color vertical median line. nBreaks numeric(1) specifying number breaks x-axis. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"recommended examine region characteristics filtering. vertical line histogram indicates median value feature. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Histograms of Region Statistics — plotRegionStats","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"plotRegionTotals() plots total number regions, width, total number CpGs remaining filtering different combinations covMin methSD line plot saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"","code":"plotRegionTotals(   regionTotals,   nBreaks = 4,   legend.position = c(1.08, 0.897),   save = TRUE,   file = \"Region_Totals.pdf\",   width = 11,   height = 11,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"regionTotals data.frame, output getRegionTotals(). nBreaks numeric(1) specifying number breaks used axes legend. legend.position numeric(2) specifying position legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"plotRegionTotals() designed used combination getRegionTotals(). ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotRegionTotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Region Totals at Different Cutoffs — plotRegionTotals","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"plotSDstats() takes set regions getRegions(), generates heatmaps methylation standard deviation region features, saves pdf. Compared features include number CpGs, minimum coverage, mean coverage, mean methylation.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"","code":"plotSDstats(   regions,   maxQuantile = 1,   bins = 30,   nBreaks = 4,   legend.position = c(1.09, 0.9),   save = TRUE,   file = \"SD_Plots.pdf\",   width = 8.5,   height = 8.5,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"regions data.frame output getRegions() giving set regions statistics region. maxQuantile numeric(1) giving maximum quantile feature plot. bins numeric(1) specifying number bins axes heatmap. nBreaks numeric(1) specifying number breaks axes. legend.position numeric(2) specifying position legend, x-axis, y-axis. May also character(1) indicating \"none\", \"left\", \"right\", \"bottom\", \"top\". save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"recommended examine plots filtering ensure removal regions high variability due insufficient data. Plots heatmaps 2D bin counts, color indicating number regions bin log10 scale. ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSDstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heatmaps of Region Standard Deviation vs Features — plotSDstats","text":"","code":"if (FALSE) {  # Call Regions regions <- getRegions(bs, file = \"Unfiltered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Unfiltered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Unfiltered_SD_Plots.pdf\")  # Examine Region Totals at Different Cutoffs regionTotals <- getRegionTotals(regions, file = \"Region_Totals.txt\") plotRegionTotals(regionTotals, file = \"Region_Totals.pdf\")  # Filter Regions regions <- filterRegions(regions, covMin = 10, methSD = 0.05,                          file = \"Filtered_Regions.txt\") plotRegionStats(regions, maxQuantile = 0.99,                 file = \"Filtered_Region_Plots.pdf\") plotSDstats(regions, maxQuantile = 0.99,             file = \"Filtered_SD_Plots.pdf\") }"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Soft Power Fit and Connectivity — plotSoftPower","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"plotSoftPower() visualizes scale-free topology fit mean connectivity multiple soft power thresholds scatterplot, saves .pdf.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"","code":"plotSoftPower(   sft,   pointCol = \"#132B43\",   lineCol = \"red\",   nBreaks = 4,   save = TRUE,   file = \"Soft_Power_Plots.pdf\",   width = 8.5,   height = 4.25,   verbose = TRUE )"},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"sft list produced getSoftPower() two elements: powerEstimate fitIndices. pointCol character(1) specifying color points. lineCol character(1) giving color line label estimated soft power threshold scale-free topology. nBreaks numeric(1) specifying number breaks used axes. save logical(1) indicating whether save plot. file character(1) giving file name (.pdf) saved plot. width numeric(1) specifying width inches saved plot. height numeric(1) specifying height inches saved plot. verbose logical(1) indicating whether messages printed.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"ggplot object.","code":""},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"plotSoftPower() designed used combination getSoftPower(). ggplot object produced can edited outside function desired.","code":""},{"path":[]},{"path":"https://cemordaunt.github.io/comethyl/reference/plotSoftPower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Soft Power Fit and Connectivity — plotSoftPower","text":"","code":"if (FALSE) {  # Get Methylation Data meth <- getRegionMeth(regions, bs = bs, file = \"Region_Methylation.rds\")  # Adjust Methylation Data for PCs mod <- model.matrix(~1, data = pData(bs)) methAdj <- adjustRegionMeth(meth, mod = mod,                             file = \"Adjusted_Region_Methylation.rds\")  # Select Soft Power Threshold sft <- getSoftPower(methAdj, corType = \"pearson\", file = \"Soft_Power.rds\") plotSoftPower(sft, file = \"Soft_Power_Plots.pdf\")  # Get Comethylation Modules modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,                       corType = \"pearson\", file = \"Modules.rds\") }"}]
