% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Annotate_Modules.R
\name{annotateModule}
\alias{annotateModule}
\title{Annotate Module Regions}
\usage{
annotateModule(
  regions,
  module = NULL,
  grey = FALSE,
  genome = c("hg38", "hg19", "hg18", "mm10", "mm9", "danRer7"),
  includeCuratedRegDoms = FALSE,
  rule = c("basalPlusExt", "twoClosest", "oneClosest"),
  adv_upstream = 5,
  adv_downstream = 1,
  adv_span = 1000,
  adv_twoDistance = 1000,
  adv_oneDistance = 1000,
  version = c("4.0.4", "3.0.0", "2.0.2"),
  save = TRUE,
  file = "Annotated_Module_Regions.txt",
  verbose = TRUE
)
}
\arguments{
\item{regions}{A \code{data.frame} of regions with module assignments,
typically obtained from \code{\link[=getModules]{getModules()}}.}

\item{module}{A \code{character} giving the name of one or more modules to
annotate. If null, all modules will be annotated.}

\item{grey}{A \code{logical(1)} specifying whether or not to include the grey
(unassigned) module.}

\item{genome}{A \code{character(1)} giving the genome build for the regions.
Supported genomes include \code{hg38}, \code{hg19}, \code{hg18},
\code{mm10}, \code{mm9}, and \code{danRer7}. See \code{Details}.}

\item{includeCuratedRegDoms}{A \code{logical(1)} indicating whether to include
curated regulatory domains for GREAT gene annotation.}

\item{rule}{A \code{character(1)} specifying the rule used by GREAT for gene
annotation. Possible values include \code{basalPlusExt},
\code{twoClosest}, and \code{oneClosest}. See \code{\link[rGREAT:submitGreatJob]{rGREAT::submitGreatJob()}}
for more details for this and the next six arguments.}

\item{adv_upstream}{A \code{numeric(1)} giving the distance upstream of the
TSS (in kb) to define a basal regulatory domain in the
\code{basalPlusExt} rule.}

\item{adv_downstream}{A \code{numeric(1)} giving the distance downstream of
the TSS (in kb) to define a basal regulatory domain in the
\code{basalPlusExt} rule.}

\item{adv_span}{A \code{numeric(1)} specifying the distance upstream and
downstream of the TSS (in kb) to define the maximum extension of the
regulatory domain in the \code{basalPlusExt} rule.}

\item{adv_twoDistance}{A \code{numeric(1)} giving the distance upstream and
downstream of the TSS (in kb) to define the maximum extension of the
regulatory domain in the \code{twoClosest} rule.}

\item{adv_oneDistance}{A \code{numeric(1)} giving the distance upstream and
downstream of the TSS (in kb) to define the maximum extension of the
regulatory domain in the \code{oneClosest} rule.}

\item{version}{A \code{character(1)} specifying the version of GREAT to use
for gene annotation. Possible values include \code{4.0.4},
\code{3.0.0}, and \code{2.0.2}. Different versions of GREAT support
different genomes. See \code{Details}.}

\item{save}{A \code{logical(1)} indicating whether to save the
\code{data.frame}.}

\item{file}{A \code{character(1)} giving the file name (.txt) for the saved
\code{data.frame}.}

\item{verbose}{A \code{logical(1)} indicating whether messages should be
printed.}
}
\value{
A \code{data.frame} adding gene and regulatory annotations to the
regions.
}
\description{
\code{annotateModule()} takes a \code{data.frame} of regions with module
assignments, annotates them with genes using GREAT, adds additional gene
information with Ensembl BioMart, provides gene regulatory context with
annotatr, and then saves this as a .txt file. Support is provided for several
genomes, including \code{hg38}, \code{hg19}, \code{hg18}, \code{mm10},
\code{mm9}, and \code{danRer7}.
}
\details{
\code{regions} can be filtered for one or more modules of interest, or the
grey (unassigned) module can be excluded. Gene annotation is performed by the
\pkg{rGREAT} package, which allows for different annotation rules and versions
of GREAT. The default \code{basalPlusExt} annotation rule associates a gene
with a region if the region is within the basal regulatory domain of the gene
(5 kb upstream and 1 kb downstream of the TSS) or if it is within 1 Mb
upstream or downstream of the TSS and not in the basal regulatory domain of
another gene. Other rules include \code{twoClosest} and \code{oneClosest},
which effectively assign the two nearest genes or one nearest genes,
respectively. See \code{\link[rGREAT:submitGreatJob]{rGREAT::submitGreatJob()}} for more details.

GREAT supports different genomes depending on the version:
\describe{
\item{GREAT v4.0.4}{\code{hg38}, \code{hg19}, \code{mm10}, \code{mm9}}
\item{GREAT v3.0.0}{\code{hg19}, \code{mm10}, \code{mm9}, \code{danRer7}}
\item{GREAT v2.0.2}{\code{hg19}, \code{hg18}, \code{mm9}, \code{danRer7}}
}

Gene information is provided by the \pkg{biomaRt} package, which adds the gene
description along with Ensembl and NCBI Entrez gene IDs. Regulatory context
is added by the \pkg{annotatr} package. This provides positional context of
the region relative to nearby genes, enhancers, and CpG islands. Note that
\pkg{annotatr} does not support the \code{hg18} or \code{danRer7} genomes.
}
\examples{
\dontrun{

# Get Comethylation Modules
modules <- getModules(methAdj, power = sft$powerEstimate, regions = regions,
                      corType = "pearson", file = "Modules.rds")

# Annotate Modules
regionsAnno <- annotateModule(regions, module = "bisque4",
                              genome = "hg38",
                              file = "Annotated_bisque4_Module_Regions.txt")
geneList_bisque4 <- getGeneList(regionsAnno, module = "bisque4")

# Analyze Functional Enrichment
ontologies <- listOntologies("hg38", version = "4.0.4")
enrich_bisque4 <- enrichModule(regions, module = "bisque4",
                               genome = "hg38",
                               file = "bisque4_Module_Enrichment.txt")
plotEnrichment(enrich_bisque4,
               file = "bisque4_Module_Enrichment_Plot.pdf")
}

}
\seealso{
\itemize{
\item \code{\link[=getModules]{getModules()}} to build a comethylation network and identify
modules of comethylated regions.
\item \code{\link[=getGeneList]{getGeneList()}} to extract a list of genes or IDs from the
annotated regions.
\item \code{\link[=listOntologies]{listOntologies()}}, \code{\link[=enrichModule]{enrichModule()}}, and \code{\link[=plotEnrichment]{plotEnrichment()}} to
investigate functional enrichment of module regions with GREAT.
}
}
