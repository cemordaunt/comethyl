% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Get_and_Filter_Regions.R
\name{getRegions}
\alias{getRegions}
\title{Generate Regions from CpGs}
\usage{
getRegions(
  bs,
  annotation = NULL,
  genome = c("hg38", "hg19", "mm10", "mm9", "rn6", "rn5", "rn4", "dm6", "dm3",
    "galGal5"),
  upstream = 5000,
  downstream = 1000,
  custom = NULL,
  maxGap = 150,
  n = 3,
  save = TRUE,
  file = "Unfiltered_Regions.txt",
  verbose = TRUE
)
}
\arguments{
\item{bs}{A \code{\link[bsseq:`BSseq-class`]{BSseq}} object.}

\item{annotation}{A \code{character(1)} giving the built-in genomic
annotation to use for defining regions. Shortcuts are available for
\code{genes}, \code{promoters}, and \code{transcripts}. Get the
entire list of possible annotations with
\code{\link[annotatr]{builtin_annotations()}}, which also includes
CpG islands, enhancers, and chromatin states.}

\item{genome}{A \code{character(1)} with the genome build to use for
built-in annotations. Available builds include \code{hg38},
\code{hg19}, \code{mm10}, \code{mm9}, \code{rn6}, \code{rn5},
\code{rn4}, \code{dm6}, \code{dm3}, and \code{galGal5}.}

\item{upstream}{A \code{numeric(1)} giving the number of bases upstream of a
transcription start site to specify a promoter. Used for the
\code{promoters} built-in annotation.}

\item{downstream}{A \code{numeric(1)} giving the number of bases downstream
of a transcription start site to specify a promoter. Used for the
\code{promoters} built-in annotation.}

\item{custom}{A \code{\link[GenomicRanges:`GRanges-class`]{GRanges}} object
with a custom genomic annotation for defining regions. Construct this
using \code{\link[GenomicRanges]{GRanges()}}.}

\item{maxGap}{A \code{numeric(1)} specifying the maximum number of bases
between CpGs to be included in the same CpG cluster.}

\item{n}{A \code{numeric(1)} giving the minimum number of CpGs for a region
to be returned. This applies to CpG clusters, built-in, and custom,
annotations.}

\item{save}{A \code{logical(1)} indicating whether to save the
\code{data.frame}.}

\item{file}{A \code{character(1)} giving the file name (.txt) for the saved
\code{data.frame}.}

\item{verbose}{A \code{logical(1)} indicating whether messages should be
printed.}
}
\value{
A \code{data.frame} with the region genomic locations along with some
statistics, including number of CpGs, coverage minimum, mean, and
standard deviation, and methylation mean and standard deviation.
}
\description{
\code{getRegions()} generates a set of regions and some statistics based on
the CpGs in a \code{\link[bsseq:`BSseq-class`]{BSseq}} object and then saves
it as a tab-delimited text file. Regions can be defined based on CpG
locations (for CpG clusters), built-in genomic annotations from
\pkg{annotatr}, or a custom genomic annotation.
}
\details{
These regions still need to be filtered for minimum coverage and methylation
standard deviation.
}
\examples{
\dontrun{

# Call Regions
regions <- getRegions(bs, file = "Unfiltered_Regions.txt")
plotRegionStats(regions, maxQuantile = 0.99,
                file = "Unfiltered_Region_Plots.pdf")
plotSDstats(regions, maxQuantile = 0.99,
            file = "Unfiltered_SD_Plots.pdf")

# Examine Region Totals at Different Cutoffs
regionTotals <- getRegionTotals(regions, file = "Region_Totals.txt")
plotRegionTotals(regionTotals, file = "Region_Totals.pdf")

# Filter Regions
regions <- filterRegions(regions, covMin = 10, methSD = 0.05,
                         file = "Filtered_Regions.txt")
plotRegionStats(regions, maxQuantile = 0.99,
                file = "Filtered_Region_Plots.pdf")
plotSDstats(regions, maxQuantile = 0.99,
            file = "Filtered_SD_Plots.pdf")
}

}
\seealso{
\itemize{
\item \code{\link{plotRegionStats()}}, \code{\link{plotSDstats()}},
\code{\link{getRegionTotals()}}, and
\code{\link{plotRegionTotals()}} for help visualizing region
characteristics and setting cutoffs for filtering.
\item \code{\link{filterRegions()}} for filtering regions by minimum
coverage and methylation standard deviation.
}
}
